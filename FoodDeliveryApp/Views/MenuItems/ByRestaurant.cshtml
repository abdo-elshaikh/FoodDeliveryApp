@model FoodDeliveryApp.ViewModels.MenuItems.MenuItemListViewModel
@{
    ViewData["Title"] = $"Menu - {Model.RestaurantName}";
    ViewData["ActiveMenu"] = "Restaurants";
}

<div class="container mt-5">
    <!-- Breadcrumbs -->
    <nav aria-label="breadcrumb" class="mb-4">
        <ol class="breadcrumb glassmorphic p-3 rounded-3">
            <li class="breadcrumb-item"><a asp-controller="Home" asp-action="Index">Home</a></li>
            <li class="breadcrumb-item"><a asp-controller="Restaurants" asp-action="Details" asp-route-id="@Model.RestaurantId">@Model.RestaurantName</a></li>
            <li class="breadcrumb-item active" aria-current="page">Menu</li>
        </ol>
    </nav>

    <!-- Header and Actions -->
    <div class="row align-items-center mb-5">
        <div class="col-md-8">
            <h1 class="display-4 fw-bold animate__animated animate__fadeIn">@Model.RestaurantName</h1>
            <p class="lead text-muted animate__animated animate__fadeIn" data-animate-delay="0.2">Explore our delicious menu offerings</p>
        </div>
        <div class="col-md-4 text-md-end">
            @if (User.IsInRole("Owner") || User.IsInRole("Admin"))
            {
                <a asp-action="Create" asp-route-restaurantId="@Model.RestaurantId" class="btn btn-primary btn-lg me-2 animate__animated animate__fadeIn" data-animate-delay="0.4">
                    <i class="bi bi-plus-circle me-1"></i> Add Item
                </a>
            }
            <a asp-controller="Restaurants" asp-action="Details" asp-route-id="@Model.RestaurantId" class="btn btn-outline-secondary btn-lg animate__animated animate__fadeIn" data-animate-delay="0.6">
                <i class="bi bi-arrow-left me-1"></i> Back
            </a>
        </div>
    </div>

    <!-- Menu Content -->
    <div class="row">
        <!-- Category Filter Sidebar -->
        <div class="col-lg-3 mb-4">
            <div class="category-filter glassmorphic p-4 rounded-3 sticky-top" style="top: 100px;" role="navigation" aria-label="Menu filters">
                <h5 class="mb-3">Filter Menu</h5>
                <div class="mb-3">
                    <input type="text" class="form-control rounded-3" id="menuSearch" placeholder="Search menu items..." aria-label="Search menu items">
                </div>
                <h6 class="mb-2">Categories</h6>
                <div class="category-list" role="tablist">
                    <button class="btn btn-filter w-100 text-start mb-2 active" data-category="all" role="tab" aria-selected="true" aria-controls="menu-items">All Items</button>
                    @foreach (var category in Model.Categories)
                    {
                        <button class="btn btn-filter w-100 text-start mb-2" data-category="@category.Id" role="tab" aria-selected="false" aria-controls="menu-items">@category.Name</button>
                    }
                </div>
            </div>
        </div>

        <!-- Menu Items -->
        <div class="col-lg-9">
            @if (!Model.MenuItems.Any())
            {
                <div class="alert alert-info glassmorphic p-4 rounded-3 animate__animated animate__fadeIn">
                    No menu items available for this restaurant.
                </div>
            }
            else
            {
                <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4 menu-items" id="menu-items" role="region" aria-live="polite">
                    @foreach (var item in Model.MenuItems)
                    {
                        <div class="col menu-item" data-name="@item.Name.ToLower()" data-category="@item." data-aos="zoom-in">
                            <div class="card h-100 glassmorphic shadow-sm">
                                @if (!string.IsNullOrEmpty(item.ImageUrl))
                                {
                                    <img src="@item.ImageUrl" class="card-img-top" alt="@item.Name" style="height: 200px; object-fit: cover;" loading="lazy" onerror="this.src='/images/food-placeholder.jpg'">
                                }
                                else
                                {
                                    <div class="bg-light text-center" style="height: 200px;">
                                        <i class="bi bi-egg-fried text-muted" style="font-size: 4rem; line-height: 200px;"></i>
                                    </div>
                                }
                                <div class="card-body">
                                    <h5 class="card-title">@item.Name</h5>
                                    <p class="card-text text-muted small">@(item.Description?.Length > 80 ? item.Description.Substring(0, 80) + "..." : item.Description)</p>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <span class="text-primary fw-bold">$@item.Price.ToString("F2")</span>
                                        @if (!item.IsAvailable)
                                        {
                                            <span class="badge bg-warning text-dark">Unavailable</span>
                                        }
                                    </div>
                                </div>
                                <div class="card-footer bg-transparent border-top-0">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-sm btn-outline-primary">
                                            <i class="bi bi-info-circle me-1"></i> Details
                                        </a>
                                        @if (User.IsInRole("Owner") || User.IsInRole("Admin"))
                                        {
                                            <div>
                                                <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-sm btn-outline-secondary">
                                                    <i class="bi bi-pencil-square me-1"></i> Edit
                                                </a>
                                                <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-sm btn-outline-danger ms-1">
                                                    <i class="bi bi-trash me-1"></i>
                                                </a>
                                            </div>
                                        }
                                        else
                                        {
                                            @* <button class="btn btn-sm btn-primary add-to-cart" data-id="@item.Id" data-name="@item.Name" data-price="@item.Price" data-available="@item.IsAvailable" data-bs-toggle="modal" data-bs-target="#cartModal"> *@
                                            @*     <i class="bi bi-cart-plus me-1"></i> Add *@
                                            @* </button> *@
                                            <button class="btn btn-primary rounded-pill" id="addToCartBtn" data-id="@item.Id" data-name="@item.Name" data-image="@item.ImageUrl">
                                                <i class="bi bi-cart-plus me-2"></i> Add to Cart - $<span id="totalPrice">@item.Price.ToString("0.00")</span>
                                            </button>

                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

<!-- Cart Modal -->
<div class="modal fade" id="cartModal" tabindex="-1" aria-labelledby="cartModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content glassmorphic">
            <div class="modal-header">
                <h5 class="modal-title" id="cartModalLabel">Add to Cart</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="d-flex align-items-center mb-3">
                    <img id="cartItemImage" src="" alt="" class="me-3 rounded" style="width: 80px; height: 80px; object-fit: cover;">
                    <div>
                        <h6 id="cartItemName"></h6>
                        <p class="text-muted mb-0" id="cartItemPrice"></p>
                    </div>
                </div>
                <div class="mb-3">
                    <label for="cartItemQuantity" class="form-label">Quantity</label>
                    <div class="input-group w-50">
                        <button class="btn btn-outline-secondary" type="button" id="decreaseQuantity">-</button>
                        <input type="number" class="form-control text-center" id="cartItemQuantity" value="1" min="1" max="100" aria-label="Quantity">
                        <button class="btn btn-outline-secondary" type="button" id="increaseQuantity">+</button>
                    </div>
                </div>
                <div id="customizationOptions" class="mb-3"></div>
                <div class="d-none" id="cartLoading">
                    <div class="spinner-border text-primary custom-spinner" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmAddToCart">Add to Cart</button>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        :root {
            --primary: #ff5733;
            --secondary: #6c757d;
            --light: #ffffff;
            --dark: #1a1a1a;
            --glass-bg: rgba(255, 255, 255, 0.9);
            --glass-border: rgba(255, 255, 255, 0.3);
            --text-muted-dark: #adb5bd;
        }

        [data-bs-theme="dark"] {
            --light: #1a1a1a;
            --dark: #f8f9fa;
            --glass-bg: rgba(40, 40, 40, 0.9);
            --glass-border: rgba(255, 255, 255, 0.2);
            --text-muted: var(--text-muted-dark);
        }

        .glassmorphic {
            background: var(--glass-bg);
            backdrop-filter: blur(12px);
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);
            border: 1px solid var(--glass-border);
        }

        .breadcrumb {
            background: transparent;
            font-size: 0.9rem;
        }

        .breadcrumb-item a {
            color: var(--primary);
            text-decoration: none;
            transition: color 0.3s ease;
        }

            .breadcrumb-item a:hover {
                color: #e64d2e;
            }

        .breadcrumb-item.active {
            color: var(--dark);
        }

        [data-bs-theme="dark"] .breadcrumb-item.active {
            color: var(--light);
        }

        h1 {
            font-family: 'Inter', sans-serif;
            font-weight: 700;
        }

        .category-filter .form-control {
            border-radius: 8px;
            background: rgba(255, 255, 255, 0.8);
            border: 1px solid var(--glass-border);
            transition: border-color 0.3s, box-shadow 0.3s;
        }

            .category-filter .form-control:focus {
                border-color: var(--primary);
                box-shadow: 0 0 0 3px rgba(255, 87, 51, 0.15);
            }

        [data-bs-theme="dark"] .category-filter .form-control {
            background: rgba(255, 255, 255, 0.1);
            color: var(--light);
            border-color: var(--glass-border);
        }

        .btn-filter {
            border-radius: 8px;
            padding: 0.5rem 1rem;
            font-weight: 500;
            color: var(--dark);
            background: transparent;
            transition: all 0.3s ease;
        }

        [data-bs-theme="dark"] .btn-filter {
            color: var(--light);
        }

        .btn-filter.active,
        .btn-filter:hover {
            background: var(--primary);
            color: #fff;
        }

        .btn-filter:focus-visible {
            outline: 2px solid var(--primary);
            outline-offset: 2px;
        }

        .card.glassmorphic {
            border: none;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

            .card.glassmorphic:hover {
                transform: translateY(-5px);
                box-shadow: 0 12px 40px rgba(0, 0, 0, 0.2);
            }

        .card-img-top {
            border-top-left-radius: 12px;
            border-top-right-radius: 12px;
        }

        .card-title {
            font-size: 1.25rem;
            font-weight: 600;
        }

        .card-text {
            font-size: 0.875rem;
        }

        .card-footer .btn {
            border-radius: 8px;
            padding: 0.4rem 1rem;
            font-size: 0.875rem;
        }

        .modal-content.glassmorphic {
            border: none;
        }

        .modal-body img {
            border: 2px solid var(--primary);
        }

        .input-group .btn {
            border-radius: 0;
        }

        .input-group .form-control {
            border-radius: 0;
            text-align: center;
        }

        .custom-spinner {
            width: 1.5rem;
            height: 1.5rem;
            border-width: 0.2em;
            animation: spinner-pulse 1.2s infinite ease-in-out;
        }

        @@keyframes spinner-pulse {
            0%, 100%

        {
            transform: scale(1);
            opacity: 1;
        }

        50% {
            transform: scale(1.3);
            opacity: 0.7;
        }

        }

        @@media (max-width: 991.98px) {
            .category-filter

        {
            position: static;
        }

        .menu-items .col {
            flex: 0 0 50%;
            max-width: 50%;
        }

        }

        @@media (max-width: 767.98px) {
            .menu-items .col

        {
            flex: 0 0 100%;
            max-width: 100%;
        }

        }

        @@media (prefers-reduced-motion: reduce) {
            .card.glassmorphic, .btn-filter, .custom-spinner

        {
            transition: none;
            animation: none;
        }

        }
    </style>
}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/gsap@3.12.5/dist/gsap.min.js" defer></script>
    <script>
        // Debounce utility
        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        // Client-side menu filtering
        function filterMenuItems() {
            const searchQuery = $('#menuSearch').val().toLowerCase().trim();
            const selectedCategory = $('.btn-filter.active').data('category');
            $('.menu-item').each(function () {
                const itemName = $(this).data('name');
                const itemCategory = $(this).data('category') || 'all';
                const matchesSearch = !searchQuery || itemName.includes(searchQuery);
                const matchesCategory = selectedCategory === 'all' || itemCategory == selectedCategory;
                $(this).toggle(matchesSearch && matchesCategory);
            });
        }

        $('#menuSearch').on('input', debounce(filterMenuItems, 300));

        $('.btn-filter').on('click', function () {
            $('.btn-filter').removeClass('active').attr('aria-selected', 'false');
            $(this).addClass('active').attr('aria-selected', 'true');
            filterMenuItems();
            gsap.to('.menu-items', { opacity: 0.5, duration: 0.2, onComplete: () => {
                gsap.to('.menu-items', { opacity: 1, duration: 0.2 });
            }});
        });

        // Cart Modal
        let currentItemId;
        $('.add-to-cart').on('click', function () {
            const id = $(this).data('id');
            const name = $(this).data('name');
            const price = $(this).data('price');
            const available = $(this).data('available');
            const image = $(this).closest('.card').find('.card-img-top').attr('src') || '/images/food-placeholder.jpg';

            if (!available) {
                showNotification('warning', 'Item Unavailable', `${name} is currently unavailable.`, 'bi-exclamation-triangle');
                return;
            }

            currentItemId = id;
            $('#cartItemName').text(name);
            $('#cartItemPrice').text(`$${price.toFixed(2)}`);
            $('#cartItemImage').attr('src', image).attr('alt', name);
            $('#cartItemQuantity').val(1);
            $('#customizationOptions').html('<div class="text-muted">Loading customizations...</div>');

            // Fetch customization options
            $.get(`/menu-items/${id}/customizations`, function (data) {
                $('#customizationOptions').html(data);
                gsap.from('#customizationOptions', { opacity: 0, y: 10, duration: 0.3 });
            }).fail(() => {
                $('#customizationOptions').html('<div class="text-muted">No customizations available.</div>');
            });

            gsap.from('.modal-content', { opacity: 0, y: 50, duration: 0.5, ease: 'power2.out' });
        });

        $('#increaseQuantity').on('click', function () {
            const input = $('#cartItemQuantity');
            const newValue = Math.min(parseInt(input.val()) + 1, 100);
            input.val(newValue);
        });

        $('#decreaseQuantity').on('click', function () {
            const input = $('#cartItemQuantity');
            const newValue = Math.max(parseInt(input.val()) - 1, 1);
            input.val(newValue);
        });

        $('#confirmAddToCart').on('click', function () {
            const quantity = parseInt($('#cartItemQuantity').val());
            if (quantity < 1 || quantity > 100) {
                showNotification('error', 'Invalid Quantity', 'Please select a quantity between 1 and 100.', 'bi-exclamation-triangle');
                return;
            }

            const customizations = [];
            $('#customizationOptions select').each(function () {
                const optionId = $(this).data('option-id');
                const choiceId = $(this).val();
                if (choiceId) {
                    customizations.push({ OptionId: optionId, ChoiceId: parseInt(choiceId), Price: parseFloat($(this).find(':selected').data('price') || 0) });
                }
            });

            const data = {
                id: currentItemId,
                quantity: quantity,
                customizations: customizations,
                __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
            };

            $('#confirmAddToCart').prop('disabled', true);
            $('#cartLoading').removeClass('d-none');

            $.ajax({
                url: `/menu-items/${currentItemId}/add-to-cart`,
                type: 'POST',
                data: data,
                success: function (response) {
                    showNotification('success', 'Added to Cart', `${$('#cartItemName').text()} has been added to your cart.`, 'bi-check-circle');
                    updateCartCount(response.cartCount);
                    $('#cartModal').modal('hide');
                },
                error: function () {
                    showNotification('error', 'Cart Error', 'An error occurred while adding to cart.', 'bi-exclamation-triangle');
                },
                complete: function () {
                    $('#confirmAddToCart').prop('disabled', false);
                    $('#cartLoading').addClass('d-none');
                }
            });
        });

        // add to cart
        $('#addToCartBtn').click(function () {
            const menuItemId = $(this).data('id');
            const quantity = parseInt($('#itemQuantity').val()) || 1;
            const customizations = [];

            $('.customization-choice:checked').each(function () {
                customizations.push({
                    optionId: $(this).data('option-id'),
                    choiceId: $(this).val(),
                    price: parseFloat($(this).data('price') || 0)
                });
            });

            $.ajax({
                url: '/cart/add',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ menuItemId, quantity, customizations }),
                headers: { 'X-CSRF-TOKEN': $('input[name="__RequestVerificationToken"]').val() },
                success: function (response) {
                    if (response.success) {
                        alert(response.message);
                        updateCartCount(response.cartCount);
                    } else {
                        alert(response.message);
                    }
                },
                error: function () {
                    alert('An error occurred while adding to cart.');
                }
            });
        });


        // Notification utility
        function showNotification(type, title, message, icon) {
            const alert = $(`
                <div class="alert alert-${type} alert-dismissible fade show glassmorphic position-fixed bottom-0 end-0 m-3" role="alert" style="z-index: 1050;">
                    <i class="bi ${icon} me-2"></i>
                    <strong>${title}</strong> ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            `);
            $('body').append(alert);
            gsap.from(alert, { opacity: 0, x: 50, duration: 0.5, ease: 'power2.out' });
            setTimeout(() => alert.alert('close'), 5000);
        }

        // Update cart count
        function updateCartCount(count) {
            $.get('/cart/summary', function (data) {
                $('.cart-count').text(data || count || 0);
            });
        }

        // IntersectionObserver for animations
        const observer = new IntersectionObserver((entries, observer) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    $(entry.target).find('[data-aos]').addClass('aos-animate');
                    observer.unobserve(entry.target);
                }
            });
        }, { threshold: 0.1 });

        $('.menu-item').each(function () {
            observer.observe(this);
        });

        // Initialize
        $(document).ready(function () {
            $('.btn-filter[data-category="all"]').click(); // Default to 'All' filter
            gsap.from('.menu-item', {
                opacity: 0,
                y: 20,
                duration: 0.5,
                stagger: 0.1,
                ease: 'power2.out'
            });
        });
    </script>
}