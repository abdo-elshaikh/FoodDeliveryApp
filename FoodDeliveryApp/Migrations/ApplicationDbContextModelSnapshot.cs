// <auto-generated />
using System;
using FoodDeliveryApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FoodDeliveryApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FoodDeliveryApp.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressType")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "9c81cb6a-9f7e-46b8-b2fe-cd86d8ccb095",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "da9de4bf-2a29-4533-8774-1ced0807b444",
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 37, 744, DateTimeKind.Utc).AddTicks(393),
                            Email = "admin@fooddeliveryapp",
                            EmailConfirmed = true,
                            FirstName = "John",
                            IsActive = true,
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "admin@fooddeliveryapp",
                            NormalizedUserName = "admin@fooddeliveryapp",
                            PasswordHash = "AQAAAAIAAYagAAAAEGFb41o1Ua5Dvk+JihgQxvjFuuaH73Qz190krpPdjWndTYZ+yPpjzo3gjdGBibYnoA==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "",
                            Role = 2,
                            SecurityStamp = "21533671-8646-43e5-8ba1-6bc3553fe6cd",
                            TwoFactorEnabled = false,
                            UserName = "admin@fooddeliveryapp"
                        },
                        new
                        {
                            Id = "4d6ca63e-e331-4553-a2ba-d5ff0e401d5a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "04f5d4a0-15d9-4c92-bf1c-0a76fe24d9c0",
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 37, 899, DateTimeKind.Utc).AddTicks(6860),
                            Email = "owner@fooddeliveryapp",
                            EmailConfirmed = true,
                            FirstName = "Jane",
                            IsActive = true,
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "owner@fooddeliveryapp",
                            NormalizedUserName = "owner@fooddeliveryapp",
                            PasswordHash = "AQAAAAIAAYagAAAAEG5l3FMUZd8FK4vWNsW+uWD4MUikQurw1Z68AEu1h3ie5RtFpJDgw6bIzDGbTY8mVg==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "",
                            Role = 3,
                            SecurityStamp = "a2e06bd6-506b-4902-9719-9f394539fa81",
                            TwoFactorEnabled = false,
                            UserName = "owner@fooddeliveryapp"
                        },
                        new
                        {
                            Id = "b6db1b82-b9df-480d-87bd-868408cc08c8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c61545f3-5c6a-45c6-88e0-d38933a5ed34",
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 72, DateTimeKind.Utc).AddTicks(1435),
                            Email = "user@fooddeliveryapp",
                            EmailConfirmed = true,
                            FirstName = "John",
                            IsActive = true,
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "user@fooddeliveryapp",
                            NormalizedUserName = "user@fooddeliveryapp",
                            PasswordHash = "AQAAAAIAAYagAAAAED8tD1kPnmSgX9+lZFWjFRQ32ECst7FMt7lIkH3f/fjmcWhFUYAc/ylcyt/jfDAJog==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "",
                            Role = 0,
                            SecurityStamp = "ccad4298-14b0-4703-8141-a7c637bb80c6",
                            TwoFactorEnabled = false,
                            UserName = "user@fooddeliveryapp"
                        },
                        new
                        {
                            Id = "cc235c9c-cbf4-42d3-8d35-342b3edb7fd7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "589b3995-7c0d-4b80-9c0e-e6ff3881440d",
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 228, DateTimeKind.Utc).AddTicks(9070),
                            Email = "driver@fooddeliveryapp",
                            EmailConfirmed = true,
                            FirstName = "John",
                            IsActive = true,
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "driver@fooddeliveryapp",
                            NormalizedUserName = "driver@fooddeliveryapp",
                            PasswordHash = "AQAAAAIAAYagAAAAEA7Ej6zpEONm7TNqNFoOTio4MT/t/aoBBuGKogeiIUHgK9PZvcpB76ww+VoVF4BuPw==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "",
                            Role = 1,
                            SecurityStamp = "f42e862e-8406-43e9-bf79-c2c10a8e410d",
                            TwoFactorEnabled = false,
                            UserName = "driver@fooddeliveryapp"
                        });
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DeliveryFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPromotionApplied")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PromotionCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("PromotionCodeExpiration")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PromotionDiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SpecialInstructions")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalWithDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MenuItemId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<string>("SpecialInstructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CurrentAddress")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double?>("CurrentLatitude")
                        .HasColumnType("float");

                    b.Property<double?>("CurrentLongitude")
                        .HasColumnType("float");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastActive")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastLocationUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VehicleInfo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MenuItemId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.MenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Calories")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVegan")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVegetarian")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<TimeSpan>("PreparationTime")
                        .HasColumnType("time");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<int?>("RestaurantCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<int>("SpiceLevel")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("RestaurantCategoryId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("MenuItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Calories = 500,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(591),
                            CreatedBy = "system",
                            Description = "Classic pizza with tomatoes, mozzarella, and basil",
                            ImageUrl = "https://images.unsplash.com/photo-1604382354936-07c5d9983bd3?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1470&q=80",
                            IsAvailable = true,
                            IsDeleted = false,
                            IsVegan = false,
                            IsVegetarian = false,
                            Name = "Margherita Pizza",
                            PreparationTime = new TimeSpan(0, 0, 15, 0, 0),
                            Price = 12.99m,
                            Rating = 4.5,
                            RestaurantId = 1,
                            SpiceLevel = 3
                        },
                        new
                        {
                            Id = 2,
                            Calories = 550,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(599),
                            CreatedBy = "system",
                            Description = "Pepperoni pizza with tomatoes, mozzarella, and basil",
                            ImageUrl = "https://images.unsplash.com/photo-1628840042765-356cda07504e?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1480&q=80",
                            IsAvailable = true,
                            IsDeleted = false,
                            IsVegan = false,
                            IsVegetarian = false,
                            Name = "Pepperoni Pizza",
                            PreparationTime = new TimeSpan(0, 0, 20, 0, 0),
                            Price = 13.99m,
                            Rating = 4.7000000000000002,
                            RestaurantId = 1,
                            SpiceLevel = 4
                        },
                        new
                        {
                            Id = 3,
                            Calories = 250,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(604),
                            CreatedBy = "system",
                            Description = "Tasty cheeseburger with lettuce, tomatoes, and onions",
                            ImageUrl = "https://images.unsplash.com/photo-1568901346375-23c9450c58cd?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1299&q=80",
                            IsAvailable = true,
                            IsDeleted = false,
                            IsVegan = false,
                            IsVegetarian = false,
                            Name = "Cheeseburger",
                            PreparationTime = new TimeSpan(0, 0, 10, 0, 0),
                            Price = 6.99m,
                            Rating = 4.2999999999999998,
                            RestaurantId = 2,
                            SpiceLevel = 2
                        },
                        new
                        {
                            Id = 4,
                            Calories = 300,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(646),
                            CreatedBy = "system",
                            Description = "Delicious chicken sandwich with lettuce, tomatoes, and mayo",
                            ImageUrl = "https://images.unsplash.com/photo-1606755962773-d324e0a13086?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1374&q=80",
                            IsAvailable = true,
                            IsDeleted = false,
                            IsVegan = false,
                            IsVegetarian = false,
                            Name = "Chicken Sandwich",
                            PreparationTime = new TimeSpan(0, 0, 15, 0, 0),
                            Price = 8.99m,
                            Rating = 4.5999999999999996,
                            RestaurantId = 2,
                            SpiceLevel = 3
                        },
                        new
                        {
                            Id = 5,
                            Calories = 450,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(651),
                            CreatedBy = "system",
                            Description = "Fresh vegetable pizza with bell peppers, onions, and mushrooms",
                            ImageUrl = "https://images.unsplash.com/photo-1593560708920-61dd98c46a4e?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1470&q=80",
                            IsAvailable = true,
                            IsDeleted = false,
                            IsVegan = false,
                            IsVegetarian = true,
                            Name = "Vegetable Pizza",
                            PreparationTime = new TimeSpan(0, 0, 18, 0, 0),
                            Price = 11.99m,
                            Rating = 4.4000000000000004,
                            RestaurantId = 1,
                            SpiceLevel = 2
                        },
                        new
                        {
                            Id = 6,
                            Calories = 580,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(657),
                            CreatedBy = "system",
                            Description = "Delicious BBQ chicken pizza with red onions and cilantro",
                            ImageUrl = "https://images.unsplash.com/photo-1594007654729-407eedc4fe24?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1428&q=80",
                            IsAvailable = true,
                            IsDeleted = false,
                            IsVegan = false,
                            IsVegetarian = false,
                            Name = "BBQ Chicken Pizza",
                            PreparationTime = new TimeSpan(0, 0, 20, 0, 0),
                            Price = 14.99m,
                            Rating = 4.7999999999999998,
                            RestaurantId = 1,
                            SpiceLevel = 3
                        },
                        new
                        {
                            Id = 7,
                            Calories = 680,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(663),
                            CreatedBy = "system",
                            Description = "Juicy burger with bacon, cheese, lettuce, and special sauce",
                            ImageUrl = "https://images.unsplash.com/photo-1553979459-d2229ba7433b?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1368&q=80",
                            IsAvailable = true,
                            IsDeleted = false,
                            IsVegan = false,
                            IsVegetarian = false,
                            Name = "Bacon Cheeseburger",
                            PreparationTime = new TimeSpan(0, 0, 12, 0, 0),
                            Price = 8.99m,
                            Rating = 4.7000000000000002,
                            RestaurantId = 2,
                            SpiceLevel = 2
                        },
                        new
                        {
                            Id = 8,
                            Calories = 420,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(668),
                            CreatedBy = "system",
                            Description = "Plant-based burger with all the fixings",
                            ImageUrl = "https://images.unsplash.com/photo-1520072959219-c595dc870360?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1490&q=80",
                            IsAvailable = true,
                            IsDeleted = false,
                            IsVegan = true,
                            IsVegetarian = true,
                            Name = "Veggie Burger",
                            PreparationTime = new TimeSpan(0, 0, 10, 0, 0),
                            Price = 7.99m,
                            Rating = 4.5,
                            RestaurantId = 2,
                            SpiceLevel = 1
                        },
                        new
                        {
                            Id = 9,
                            Calories = 650,
                            CategoryId = 6,
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(673),
                            CreatedBy = "system",
                            Description = "Creamy fettuccine pasta with parmesan cheese sauce",
                            ImageUrl = "https://images.unsplash.com/photo-1645112411341-6c4fd023882a?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1470&q=80",
                            IsAvailable = true,
                            IsDeleted = false,
                            IsVegan = false,
                            IsVegetarian = true,
                            Name = "Fettuccine Alfredo",
                            PreparationTime = new TimeSpan(0, 0, 15, 0, 0),
                            Price = 13.99m,
                            Rating = 4.5999999999999996,
                            RestaurantId = 5,
                            SpiceLevel = 1
                        },
                        new
                        {
                            Id = 10,
                            Calories = 720,
                            CategoryId = 7,
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(678),
                            CreatedBy = "system",
                            Description = "Breaded chicken topped with marinara sauce and melted cheese",
                            ImageUrl = "https://images.unsplash.com/photo-1632778149955-e80f8ceca2e8?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1470&q=80",
                            IsAvailable = true,
                            IsDeleted = false,
                            IsVegan = false,
                            IsVegetarian = false,
                            Name = "Chicken Parmesan",
                            PreparationTime = new TimeSpan(0, 0, 25, 0, 0),
                            Price = 15.99m,
                            Rating = 4.7999999999999998,
                            RestaurantId = 5,
                            SpiceLevel = 2
                        },
                        new
                        {
                            Id = 11,
                            Calories = 170,
                            CategoryId = 7,
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(683),
                            CreatedBy = "system",
                            Description = "Classic crunchy taco with seasoned beef, lettuce, and cheese",
                            ImageUrl = "https://images.unsplash.com/photo-1551504734-5ee1c4a1479b?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1470&q=80",
                            IsAvailable = true,
                            IsDeleted = false,
                            IsVegan = false,
                            IsVegetarian = false,
                            Name = "Crunchy Taco",
                            PreparationTime = new TimeSpan(0, 0, 5, 0, 0),
                            Price = 2.99m,
                            Rating = 4.2999999999999998,
                            RestaurantId = 6,
                            SpiceLevel = 3
                        },
                        new
                        {
                            Id = 12,
                            Calories = 650,
                            CategoryId = 7,
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(688),
                            CreatedBy = "system",
                            Description = "Large burrito filled with beef, beans, rice, and all the toppings",
                            ImageUrl = "https://images.unsplash.com/photo-1626700051175-6818013e1d4f?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1374&q=80",
                            IsAvailable = true,
                            IsDeleted = false,
                            IsVegan = false,
                            IsVegetarian = false,
                            Name = "Burrito Supreme",
                            PreparationTime = new TimeSpan(0, 0, 8, 0, 0),
                            Price = 7.99m,
                            Rating = 4.5,
                            RestaurantId = 6,
                            SpiceLevel = 4
                        },
                        new
                        {
                            Id = 13,
                            Calories = 490,
                            CategoryId = 7,
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(693),
                            CreatedBy = "system",
                            Description = "Crispy chicken pieces tossed in a sweet and tangy orange sauce",
                            ImageUrl = "https://images.unsplash.com/photo-1525755662778-989d0524087e?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1470&q=80",
                            IsAvailable = true,
                            IsDeleted = false,
                            IsVegan = false,
                            IsVegetarian = false,
                            Name = "Orange Chicken",
                            PreparationTime = new TimeSpan(0, 0, 15, 0, 0),
                            Price = 9.99m,
                            Rating = 4.7000000000000002,
                            RestaurantId = 7,
                            SpiceLevel = 2
                        },
                        new
                        {
                            Id = 14,
                            Calories = 380,
                            CategoryId = 7,
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(704),
                            CreatedBy = "system",
                            Description = "Stir-fried rice with vegetables, eggs, and your choice of protein",
                            ImageUrl = "https://images.unsplash.com/photo-1603133872878-684f208fb84b?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1625&q=80",
                            IsAvailable = true,
                            IsDeleted = false,
                            IsVegan = false,
                            IsVegetarian = false,
                            Name = "Fried Rice",
                            PreparationTime = new TimeSpan(0, 0, 12, 0, 0),
                            Price = 8.99m,
                            Rating = 4.4000000000000004,
                            RestaurantId = 7,
                            SpiceLevel = 2
                        },
                        new
                        {
                            Id = 15,
                            Calories = 550,
                            CategoryId = 7,
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(709),
                            CreatedBy = "system",
                            Description = "Tender chicken in a rich and creamy tomato-based sauce",
                            ImageUrl = "https://images.unsplash.com/photo-1603894584373-5ac82b2ae398?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1470&q=80",
                            IsAvailable = true,
                            IsDeleted = false,
                            IsVegan = false,
                            IsVegetarian = false,
                            Name = "Butter Chicken",
                            PreparationTime = new TimeSpan(0, 0, 20, 0, 0),
                            Price = 14.99m,
                            Rating = 4.9000000000000004,
                            RestaurantId = 8,
                            SpiceLevel = 3
                        },
                        new
                        {
                            Id = 16,
                            Calories = 210,
                            CategoryId = 10,
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(714),
                            CreatedBy = "system",
                            Description = "Soft flatbread with garlic and butter",
                            ImageUrl = "https://images.unsplash.com/photo-1596428043595-8eee307e6979?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1470&q=80",
                            IsAvailable = true,
                            IsDeleted = false,
                            IsVegan = false,
                            IsVegetarian = true,
                            Name = "Garlic Naan",
                            PreparationTime = new TimeSpan(0, 0, 8, 0, 0),
                            Price = 3.99m,
                            Rating = 4.7000000000000002,
                            RestaurantId = 8,
                            SpiceLevel = 1
                        });
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.MenuItemCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("MenuItemCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(295),
                            CreatedBy = "system",
                            Description = "Add toppings to your pizza",
                            ImageUrl = "https://images.unsplash.com/photo-1528137871618-79d2761e3fd5?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1470&q=80",
                            IsDeleted = false,
                            Name = "Pizza Toppings"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(300),
                            CreatedBy = "system",
                            Description = "Add toppings to your burger",
                            ImageUrl = "https://images.unsplash.com/photo-1550317138-10000687a72b?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1520&q=80",
                            IsDeleted = false,
                            Name = "Burger Toppings"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(302),
                            CreatedBy = "system",
                            Description = "Add toppings to your french fries",
                            ImageUrl = "https://images.unsplash.com/photo-1573080496219-bb080dd4f877?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1374&q=80",
                            IsDeleted = false,
                            Name = "French Fries Toppings"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(304),
                            CreatedBy = "system",
                            Description = "Add toppings to your salad",
                            ImageUrl = "https://images.unsplash.com/photo-1540420773420-3366772f4999?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1384&q=80",
                            IsDeleted = false,
                            Name = "Salad Toppings"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(305),
                            CreatedBy = "system",
                            Description = "Add toppings to your sushi",
                            ImageUrl = "https://images.unsplash.com/photo-1617196034183-421b4917c92d?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1470&q=80",
                            IsDeleted = false,
                            Name = "Sushi Toppings"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(307),
                            CreatedBy = "system",
                            Description = "Start your meal with delicious appetizers",
                            ImageUrl = "https://images.unsplash.com/photo-1626645738196-c2a7c87a8f58?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1470&q=80",
                            IsDeleted = false,
                            Name = "Appetizers"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(309),
                            CreatedBy = "system",
                            Description = "Hearty and satisfying main dishes",
                            ImageUrl = "https://images.unsplash.com/photo-1544025162-d76694265947?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1469&q=80",
                            IsDeleted = false,
                            Name = "Main Course"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(311),
                            CreatedBy = "system",
                            Description = "Sweet treats to finish your meal",
                            ImageUrl = "https://images.unsplash.com/photo-1563805042-7684c019e1cb?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1527&q=80",
                            IsDeleted = false,
                            Name = "Desserts"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(313),
                            CreatedBy = "system",
                            Description = "Refreshing drinks to complement your food",
                            ImageUrl = "https://images.unsplash.com/photo-1544145945-f90425340c7e?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1374&q=80",
                            IsDeleted = false,
                            Name = "Beverages"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(314),
                            CreatedBy = "system",
                            Description = "Perfect accompaniments to your main dish",
                            ImageUrl = "https://images.unsplash.com/photo-1604908176997-125f25cc6f3d?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1013&q=80",
                            IsDeleted = false,
                            Name = "Sides"
                        });
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ActualDeliveryTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DelayReason")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeliveryAddressId")
                        .HasColumnType("int");

                    b.Property<decimal>("DeliveryFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DeliveryPhotos")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("DriverId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EstimatedDeliveryTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelayed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<bool>("RequiresSignature")
                        .HasColumnType("bit");

                    b.Property<int?>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<string>("SignatureImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TrackingUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryAddressId");

                    b.HasIndex("DriverId");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrepared")
                        .HasColumnType("bit");

                    b.Property<int>("MenuItemId")
                        .HasColumnType("int");

                    b.Property<string>("Modifiers")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PreparedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<string>("SpecialInstructions")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.OrderTracking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DelayReason")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeliveryAddressId")
                        .HasColumnType("int");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EstimatedArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelayed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<bool>("RequiresSignature")
                        .HasColumnType("bit");

                    b.Property<string>("SignatureImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("TrackingUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryAddressId");

                    b.HasIndex("DriverId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderTracking");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.Promotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DiscountType")
                        .HasColumnType("int");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPercentage")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxUsageLimit")
                        .HasColumnType("int");

                    b.Property<decimal>("MinimumOrderAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UsageCount")
                        .HasColumnType("int");

                    b.Property<int?>("UsageLimit")
                        .HasColumnType("int");

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Promotions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "10OFF",
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(806),
                            CreatedBy = "system",
                            Description = "10% off your weekly orders",
                            DiscountAmount = 10m,
                            DiscountType = 0,
                            DiscountValue = 0m,
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://images.unsplash.com/photo-1607083206968-13611e3d76db?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1515&q=80",
                            IsActive = true,
                            IsDeleted = false,
                            IsPercentage = true,
                            MinimumOrderAmount = 50m,
                            RestaurantId = 1,
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "10% Off",
                            UsageCount = 0,
                            ValidUntil = new DateTime(2025, 7, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(795)
                        },
                        new
                        {
                            Id = 2,
                            Code = "SAVE25",
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(813),
                            CreatedBy = "system",
                            Description = "25% off your weekly orders",
                            DiscountAmount = 25m,
                            DiscountType = 0,
                            DiscountValue = 0m,
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://images.unsplash.com/photo-1626684496076-07e23c6361ff?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1470&q=80",
                            IsActive = true,
                            IsDeleted = false,
                            IsPercentage = true,
                            MinimumOrderAmount = 50m,
                            RestaurantId = 2,
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "25% Off",
                            UsageCount = 0,
                            ValidUntil = new DateTime(2025, 7, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(810)
                        },
                        new
                        {
                            Id = 3,
                            Code = "NEWYEAR2022",
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(823),
                            CreatedBy = "system",
                            Description = "Buy 2 get 1 free on new year's eve",
                            DiscountAmount = 0m,
                            DiscountType = 0,
                            DiscountValue = 0m,
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://images.unsplash.com/photo-1577563908411-5077b6dc7624?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1470&q=80",
                            IsActive = true,
                            IsDeleted = false,
                            IsPercentage = false,
                            MinimumOrderAmount = 50m,
                            RestaurantId = 3,
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Buy 2 Get 1 Free",
                            UsageCount = 0,
                            ValidUntil = new DateTime(2025, 6, 10, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(817)
                        },
                        new
                        {
                            Id = 4,
                            Code = "SUMMER2022",
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(828),
                            CreatedBy = "system",
                            Description = "15% off summer deals",
                            DiscountAmount = 15m,
                            DiscountType = 0,
                            DiscountValue = 0m,
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://images.unsplash.com/photo-1473186578172-c141e6798cf4?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1473&q=80",
                            IsActive = true,
                            IsDeleted = false,
                            IsPercentage = true,
                            MinimumOrderAmount = 50m,
                            RestaurantId = 4,
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "15% Off Summer",
                            UsageCount = 0,
                            ValidUntil = new DateTime(2025, 9, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(826)
                        },
                        new
                        {
                            Id = 5,
                            Code = "SUMMER2022",
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(833),
                            CreatedBy = "system",
                            Description = "15% off summer deals",
                            DiscountAmount = 15m,
                            DiscountType = 0,
                            DiscountValue = 0m,
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://images.unsplash.com/photo-1541518763669-27fef04b14ea?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1472&q=80",
                            IsActive = false,
                            IsDeleted = false,
                            IsPercentage = true,
                            MinimumOrderAmount = 50m,
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "15% Off Summer",
                            UsageCount = 0,
                            ValidUntil = new DateTime(2025, 9, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(831)
                        },
                        new
                        {
                            Id = 6,
                            Code = "SUMMER2022",
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(837),
                            CreatedBy = "system",
                            Description = "15% off summer deals",
                            DiscountAmount = 15m,
                            DiscountType = 0,
                            DiscountValue = 0m,
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://images.unsplash.com/photo-1534349762230-e0cadf78f5da?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1470&q=80",
                            IsActive = true,
                            IsDeleted = false,
                            IsPercentage = true,
                            MinimumOrderAmount = 50m,
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "15% Off Summer",
                            UsageCount = 0,
                            ValidUntil = new DateTime(2025, 9, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(836)
                        },
                        new
                        {
                            Id = 7,
                            Code = "WELCOME15",
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(842),
                            CreatedBy = "system",
                            Description = "15% off your first order",
                            DiscountAmount = 15m,
                            DiscountType = 0,
                            DiscountValue = 0m,
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://images.unsplash.com/photo-1556742049-0cfed4f6a45d?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1470&q=80",
                            IsActive = true,
                            IsDeleted = false,
                            IsPercentage = true,
                            MinimumOrderAmount = 20m,
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Welcome Discount",
                            UsageCount = 0,
                            ValidUntil = new DateTime(2025, 12, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(841)
                        },
                        new
                        {
                            Id = 8,
                            Code = "PASTA20",
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(847),
                            CreatedBy = "system",
                            Description = "20% off all pasta dishes",
                            DiscountAmount = 20m,
                            DiscountType = 0,
                            DiscountValue = 0m,
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://images.unsplash.com/photo-1551183053-bf91a1d81141?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1632&q=80",
                            IsActive = true,
                            IsDeleted = false,
                            IsPercentage = true,
                            MinimumOrderAmount = 15m,
                            RestaurantId = 5,
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Pasta Special",
                            UsageCount = 0,
                            ValidUntil = new DateTime(2025, 8, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(845)
                        },
                        new
                        {
                            Id = 9,
                            Code = "TACOTUESDAY",
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(852),
                            CreatedBy = "system",
                            Description = "Buy one taco, get one free every Tuesday",
                            DiscountAmount = 0m,
                            DiscountType = 0,
                            DiscountValue = 0m,
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://images.unsplash.com/photo-1504544750208-dc0358e63f7f?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1470&q=80",
                            IsActive = true,
                            IsDeleted = false,
                            IsPercentage = false,
                            MinimumOrderAmount = 5m,
                            RestaurantId = 6,
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Taco Tuesday",
                            UsageCount = 0,
                            ValidUntil = new DateTime(2026, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(850)
                        },
                        new
                        {
                            Id = 10,
                            Code = "FAMILYMEAL",
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(857),
                            CreatedBy = "system",
                            Description = "Save $10 on family meal combos",
                            DiscountAmount = 10m,
                            DiscountType = 0,
                            DiscountValue = 0m,
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://images.unsplash.com/photo-1493770348161-369560ae357d?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1470&q=80",
                            IsActive = true,
                            IsDeleted = false,
                            IsPercentage = false,
                            MinimumOrderAmount = 40m,
                            RestaurantId = 7,
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Family Meal Deal",
                            UsageCount = 0,
                            ValidUntil = new DateTime(2025, 9, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(855)
                        },
                        new
                        {
                            Id = 11,
                            Code = "SPICY25",
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(1013),
                            CreatedBy = "system",
                            Description = "25% off all spicy dishes",
                            DiscountAmount = 25m,
                            DiscountType = 0,
                            DiscountValue = 0m,
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://images.unsplash.com/photo-1505253758473-96b7015fcd40?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1400&q=80",
                            IsActive = true,
                            IsDeleted = false,
                            IsPercentage = true,
                            MinimumOrderAmount = 30m,
                            RestaurantId = 8,
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Spicy Special",
                            UsageCount = 0,
                            ValidUntil = new DateTime(2025, 8, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(1010)
                        },
                        new
                        {
                            Id = 12,
                            Code = "FREESHIPPING",
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(1019),
                            CreatedBy = "system",
                            Description = "Free delivery on all orders",
                            DiscountAmount = 0m,
                            DiscountType = 0,
                            DiscountValue = 0m,
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://images.unsplash.com/photo-1586023492125-27b2c045efd7?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1558&q=80",
                            IsActive = true,
                            IsDeleted = false,
                            IsPercentage = false,
                            MinimumOrderAmount = 25m,
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Free Delivery",
                            UsageCount = 0,
                            ValidUntil = new DateTime(2025, 6, 23, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(1017)
                        });
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.Restaurant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<TimeSpan?>("ClosingTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DeliveryFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DeliveryTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<string>("LocationUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<decimal?>("MinimumOrderAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<TimeSpan?>("OpeningTime")
                        .HasColumnType("time");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("WebsiteUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Restaurants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Main St",
                            CategoryId = 1,
                            City = "New York",
                            ClosingTime = new TimeSpan(0, 22, 0, 0, 0),
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(422),
                            CreatedBy = "system",
                            DeliveryFee = 5.99m,
                            DeliveryTime = "30-45 minutes",
                            Description = "Our famous pizza place",
                            Email = "pizza@fooddeliveryapp",
                            ImageUrl = "https://images.unsplash.com/photo-1513104890138-7c749659a591?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1470&q=80",
                            IsActive = true,
                            IsDeleted = false,
                            LocationUrl = "https://maps.google.com/maps?q=New+York+City",
                            MinimumOrderAmount = 20.99m,
                            Name = "Pizza Hut",
                            OpeningTime = new TimeSpan(0, 10, 0, 0, 0),
                            OwnerId = "4d6ca63e-e331-4553-a2ba-d5ff0e401d5a",
                            PhoneNumber = "123-456-7890",
                            PostalCode = "10001",
                            Rating = 4.5m,
                            State = "NY",
                            TaxRate = 8.5m,
                            WebsiteUrl = ""
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Main St",
                            CategoryId = 2,
                            City = "New York",
                            ClosingTime = new TimeSpan(0, 22, 0, 0, 0),
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(433),
                            CreatedBy = "system",
                            DeliveryFee = 5.99m,
                            DeliveryTime = "30-45 minutes",
                            Description = "Fast and fresh burgers",
                            Email = "burgerking@fooddeliveryapp",
                            ImageUrl = "https://images.unsplash.com/photo-1568901346375-23c9450c58cd?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1299&q=80",
                            IsActive = true,
                            IsDeleted = false,
                            LocationUrl = "https://maps.google.com/maps?q=New+York+City",
                            MinimumOrderAmount = 20.99m,
                            Name = "Burger King",
                            OpeningTime = new TimeSpan(0, 10, 0, 0, 0),
                            OwnerId = "4d6ca63e-e331-4553-a2ba-d5ff0e401d5a",
                            PhoneNumber = "123-456-7890",
                            PostalCode = "10001",
                            Rating = 4.0m,
                            State = "NY",
                            TaxRate = 8.5m,
                            WebsiteUrl = ""
                        },
                        new
                        {
                            Id = 3,
                            Address = "456 Main St",
                            CategoryId = 2,
                            City = "New York",
                            ClosingTime = new TimeSpan(0, 22, 0, 0, 0),
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(447),
                            CreatedBy = "system",
                            DeliveryFee = 5.99m,
                            DeliveryTime = "30-45 minutes",
                            Description = "Fast and fresh burgers",
                            Email = "mcdonalds@fooddeliveryapp",
                            ImageUrl = "https://images.unsplash.com/photo-1619881585376-15ad0d9b8b43?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1374&q=80",
                            IsActive = true,
                            IsDeleted = false,
                            LocationUrl = "https://maps.google.com/maps?q=New+York+City",
                            MinimumOrderAmount = 20.99m,
                            Name = "McDonald's",
                            OpeningTime = new TimeSpan(0, 10, 0, 0, 0),
                            OwnerId = "4d6ca63e-e331-4553-a2ba-d5ff0e401d5a",
                            PhoneNumber = "123-456-7890",
                            PostalCode = "10001",
                            Rating = 4.0m,
                            State = "NY",
                            TaxRate = 8.5m,
                            WebsiteUrl = "https://www.mcdonalds.com/"
                        },
                        new
                        {
                            Id = 4,
                            Address = "789 Main St",
                            CategoryId = 2,
                            City = "New York",
                            ClosingTime = new TimeSpan(0, 22, 0, 0, 0),
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(455),
                            CreatedBy = "system",
                            DeliveryFee = 5.99m,
                            DeliveryTime = "30-45 minutes",
                            Description = "Fresh and healthy sandwiches",
                            Email = "subway@fooddeliveryapp",
                            ImageUrl = "https://images.unsplash.com/photo-1509722747041-616f39b57569?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1470&q=80",
                            IsActive = true,
                            IsDeleted = false,
                            LocationUrl = "https://maps.google.com/maps?q=New+York+City",
                            MinimumOrderAmount = 20.99m,
                            Name = "Subway",
                            OpeningTime = new TimeSpan(0, 10, 0, 0, 0),
                            OwnerId = "4d6ca63e-e331-4553-a2ba-d5ff0e401d5a",
                            PhoneNumber = "123-456-7890",
                            PostalCode = "10001",
                            Rating = 4.5m,
                            State = "NY",
                            TaxRate = 8.5m,
                            WebsiteUrl = "https://www.subway.com/"
                        },
                        new
                        {
                            Id = 5,
                            Address = "101 Broadway",
                            CategoryId = 6,
                            City = "New York",
                            ClosingTime = new TimeSpan(0, 23, 0, 0, 0),
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(464),
                            CreatedBy = "system",
                            DeliveryFee = 6.99m,
                            DeliveryTime = "35-50 minutes",
                            Description = "Authentic Italian cuisine",
                            Email = "olivegarden@fooddeliveryapp",
                            ImageUrl = "https://images.unsplash.com/photo-1498579150354-977475b7ea0b?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1470&q=80",
                            IsActive = true,
                            IsDeleted = false,
                            LocationUrl = "https://maps.google.com/maps?q=New+York+City",
                            MinimumOrderAmount = 25.99m,
                            Name = "Olive Garden",
                            OpeningTime = new TimeSpan(0, 11, 0, 0, 0),
                            OwnerId = "4d6ca63e-e331-4553-a2ba-d5ff0e401d5a",
                            PhoneNumber = "123-456-7891",
                            PostalCode = "10002",
                            Rating = 4.7m,
                            State = "NY",
                            TaxRate = 8.5m,
                            WebsiteUrl = "https://www.olivegarden.com/"
                        },
                        new
                        {
                            Id = 6,
                            Address = "222 5th Avenue",
                            CategoryId = 7,
                            City = "New York",
                            ClosingTime = new TimeSpan(0, 23, 0, 0, 0),
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(477),
                            CreatedBy = "system",
                            DeliveryFee = 4.99m,
                            DeliveryTime = "25-40 minutes",
                            Description = "Delicious Mexican-inspired fast food",
                            Email = "tacobell@fooddeliveryapp",
                            ImageUrl = "https://images.unsplash.com/photo-1565299585323-38d6b0865b47?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1080&q=80",
                            IsActive = true,
                            IsDeleted = false,
                            LocationUrl = "https://maps.google.com/maps?q=New+York+City",
                            MinimumOrderAmount = 20.99m,
                            Name = "Taco Bell",
                            OpeningTime = new TimeSpan(0, 10, 0, 0, 0),
                            OwnerId = "4d6ca63e-e331-4553-a2ba-d5ff0e401d5a",
                            PhoneNumber = "123-456-7892",
                            PostalCode = "10003",
                            Rating = 4.2m,
                            State = "NY",
                            TaxRate = 8.5m,
                            WebsiteUrl = "https://www.tacobell.com/"
                        },
                        new
                        {
                            Id = 7,
                            Address = "333 7th Avenue",
                            CategoryId = 8,
                            City = "New York",
                            ClosingTime = new TimeSpan(0, 22, 30, 0, 0),
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(484),
                            CreatedBy = "system",
                            DeliveryFee = 5.49m,
                            DeliveryTime = "30-45 minutes",
                            Description = "Fast and fresh Chinese cuisine",
                            Email = "pandaexpress@fooddeliveryapp",
                            ImageUrl = "https://images.unsplash.com/photo-1563245372-f21724e3856d?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1374&q=80",
                            IsActive = true,
                            IsDeleted = false,
                            LocationUrl = "https://maps.google.com/maps?q=New+York+City",
                            MinimumOrderAmount = 20.99m,
                            Name = "Panda Express",
                            OpeningTime = new TimeSpan(0, 11, 0, 0, 0),
                            OwnerId = "4d6ca63e-e331-4553-a2ba-d5ff0e401d5a",
                            PhoneNumber = "123-456-7893",
                            PostalCode = "10004",
                            Rating = 4.3m,
                            State = "NY",
                            TaxRate = 8.5m,
                            WebsiteUrl = "https://www.pandaexpress.com/"
                        },
                        new
                        {
                            Id = 8,
                            Address = "444 Lexington Ave",
                            CategoryId = 9,
                            City = "New York",
                            ClosingTime = new TimeSpan(0, 23, 0, 0, 0),
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(501),
                            CreatedBy = "system",
                            DeliveryFee = 6.49m,
                            DeliveryTime = "40-55 minutes",
                            Description = "Authentic Indian cuisine with rich flavors",
                            Email = "tajmahal@fooddeliveryapp",
                            ImageUrl = "https://images.unsplash.com/photo-1585937421612-70a008356c36?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1036&q=80",
                            IsActive = true,
                            IsDeleted = false,
                            LocationUrl = "https://maps.google.com/maps?q=New+York+City",
                            MinimumOrderAmount = 25.99m,
                            Name = "Taj Mahal",
                            OpeningTime = new TimeSpan(0, 12, 0, 0, 0),
                            OwnerId = "4d6ca63e-e331-4553-a2ba-d5ff0e401d5a",
                            PhoneNumber = "123-456-7894",
                            PostalCode = "10005",
                            Rating = 4.8m,
                            State = "NY",
                            TaxRate = 8.5m,
                            WebsiteUrl = "https://www.tajmahal.com/"
                        });
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.RestaurantCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("RestaurantCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(38),
                            CreatedBy = "system",
                            Description = "Delicious pizza with a twist",
                            ImageUrl = "https://images.unsplash.com/photo-1513104890138-7c749659a591?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1470&q=80",
                            IsDeleted = false,
                            Name = "Pizza"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(44),
                            CreatedBy = "system",
                            Description = "Juicy and crispy burgers",
                            ImageUrl = "https://images.unsplash.com/photo-1568901346375-23c9450c58cd?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1299&q=80",
                            IsDeleted = false,
                            Name = "Burger"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(46),
                            CreatedBy = "system",
                            Description = "Crunchy and tangy fries",
                            ImageUrl = "https://images.unsplash.com/photo-1630384060421-cb20d0e0649d?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1025&q=80",
                            IsDeleted = false,
                            Name = "French Fries"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(48),
                            CreatedBy = "system",
                            Description = "Fresh and healthy salads",
                            ImageUrl = "https://images.unsplash.com/photo-1512621776951-a57141f2eefd?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1470&q=80",
                            IsDeleted = false,
                            Name = "Salad"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(50),
                            CreatedBy = "system",
                            Description = "Fresh and juicy sushi",
                            ImageUrl = "https://images.unsplash.com/photo-1579871494447-9811cf80d66c?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1470&q=80",
                            IsDeleted = false,
                            Name = "Sushi"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(52),
                            CreatedBy = "system",
                            Description = "Authentic Italian cuisine",
                            ImageUrl = "https://images.unsplash.com/photo-1498579150354-977475b7ea0b?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1470&q=80",
                            IsDeleted = false,
                            Name = "Italian"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(54),
                            CreatedBy = "system",
                            Description = "Spicy and flavorful Mexican food",
                            ImageUrl = "https://images.unsplash.com/photo-1565299585323-38d6b0865b47?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1080&q=80",
                            IsDeleted = false,
                            Name = "Mexican"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(55),
                            CreatedBy = "system",
                            Description = "Traditional and modern Chinese dishes",
                            ImageUrl = "https://images.unsplash.com/photo-1563245372-f21724e3856d?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1374&q=80",
                            IsDeleted = false,
                            Name = "Chinese"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(57),
                            CreatedBy = "system",
                            Description = "Aromatic and spicy Indian cuisine",
                            ImageUrl = "https://images.unsplash.com/photo-1585937421612-70a008356c36?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1036&q=80",
                            IsDeleted = false,
                            Name = "Indian"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(206),
                            CreatedBy = "system",
                            Description = "Sweet treats and desserts",
                            ImageUrl = "https://images.unsplash.com/photo-1551024601-bec78aea704b?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1364&q=80",
                            IsDeleted = false,
                            Name = "Dessert"
                        });
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("MenuItemId")
                        .HasColumnType("int");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "The Margherita Pizza was absolutely delicious. Fresh ingredients and perfect crust!",
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(1115),
                            CreatedBy = "system",
                            IsDeleted = false,
                            MenuItemId = 1,
                            Rating = 5.0m,
                            RestaurantId = 1,
                            Title = "Amazing Pizza!",
                            UserId = "b6db1b82-b9df-480d-87bd-868408cc08c8"
                        },
                        new
                        {
                            Id = 2,
                            Content = "The pepperoni pizza was good, but I wish it had more toppings.",
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(1118),
                            CreatedBy = "system",
                            IsDeleted = false,
                            MenuItemId = 2,
                            Rating = 3.5m,
                            RestaurantId = 1,
                            Title = "Good but could be better",
                            UserId = "b6db1b82-b9df-480d-87bd-868408cc08c8"
                        },
                        new
                        {
                            Id = 3,
                            Content = "This cheeseburger is amazing. Juicy, flavorful, and perfectly cooked.",
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(1121),
                            CreatedBy = "system",
                            IsDeleted = false,
                            MenuItemId = 3,
                            Rating = 4.8m,
                            RestaurantId = 2,
                            Title = "Best burger in town!",
                            UserId = "b6db1b82-b9df-480d-87bd-868408cc08c8"
                        },
                        new
                        {
                            Id = 4,
                            Content = "The chicken sandwich was okay, but nothing special.",
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(1124),
                            CreatedBy = "system",
                            IsDeleted = false,
                            MenuItemId = 4,
                            Rating = 3.0m,
                            RestaurantId = 2,
                            Title = "Decent sandwich",
                            UserId = "b6db1b82-b9df-480d-87bd-868408cc08c8"
                        },
                        new
                        {
                            Id = 5,
                            Content = "The pasta was cooked to perfection and the sauce was delicious!",
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(1127),
                            CreatedBy = "system",
                            IsDeleted = false,
                            MenuItemId = 9,
                            Rating = 4.7m,
                            RestaurantId = 5,
                            Title = "Authentic Italian",
                            UserId = "b6db1b82-b9df-480d-87bd-868408cc08c8"
                        },
                        new
                        {
                            Id = 6,
                            Content = "The tacos had the perfect amount of spice and the ingredients were fresh.",
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(1130),
                            CreatedBy = "system",
                            IsDeleted = false,
                            MenuItemId = 11,
                            Rating = 4.5m,
                            RestaurantId = 6,
                            Title = "Spicy and flavorful",
                            UserId = "b6db1b82-b9df-480d-87bd-868408cc08c8"
                        },
                        new
                        {
                            Id = 7,
                            Content = "The orange chicken was crispy and the sauce was perfect - not too sweet.",
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(1133),
                            CreatedBy = "system",
                            IsDeleted = false,
                            MenuItemId = 13,
                            Rating = 4.6m,
                            RestaurantId = 7,
                            Title = "Delicious Chinese food",
                            UserId = "b6db1b82-b9df-480d-87bd-868408cc08c8"
                        },
                        new
                        {
                            Id = 8,
                            Content = "The butter chicken was rich, creamy, and full of flavor. Highly recommend!",
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(1137),
                            CreatedBy = "system",
                            IsDeleted = false,
                            MenuItemId = 15,
                            Rating = 5.0m,
                            RestaurantId = 8,
                            Title = "Best Indian food I've had",
                            UserId = "b6db1b82-b9df-480d-87bd-868408cc08c8"
                        },
                        new
                        {
                            Id = 9,
                            Content = "Pizza Hut never disappoints. Fast delivery and delicious food!",
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(1139),
                            CreatedBy = "system",
                            IsDeleted = false,
                            Rating = 4.5m,
                            RestaurantId = 1,
                            Title = "Great restaurant",
                            UserId = "b6db1b82-b9df-480d-87bd-868408cc08c8"
                        },
                        new
                        {
                            Id = 10,
                            Content = "The staff at Olive Garden was very friendly and attentive.",
                            CreatedAt = new DateTime(2025, 6, 9, 17, 59, 38, 229, DateTimeKind.Utc).AddTicks(1142),
                            CreatedBy = "system",
                            IsDeleted = false,
                            Rating = 4.8m,
                            RestaurantId = 5,
                            Title = "Excellent service",
                            UserId = "b6db1b82-b9df-480d-87bd-868408cc08c8"
                        });
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.SearchLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Query")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ResultCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("SearchLogs");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Owner",
                            NormalizedName = "OWNER"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Driver",
                            NormalizedName = "DRIVER"
                        },
                        new
                        {
                            Id = "4",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "9c81cb6a-9f7e-46b8-b2fe-cd86d8ccb095",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "4d6ca63e-e331-4553-a2ba-d5ff0e401d5a",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "b6db1b82-b9df-480d-87bd-868408cc08c8",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "cc235c9c-cbf4-42d3-8d35-342b3edb7fd7",
                            RoleId = "3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.Address", b =>
                {
                    b.HasOne("FoodDeliveryApp.Models.ApplicationUser", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.Cart", b =>
                {
                    b.HasOne("FoodDeliveryApp.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.CartItem", b =>
                {
                    b.HasOne("FoodDeliveryApp.Models.Cart", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApp.Models.MenuItem", "MenuItem")
                        .WithMany()
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApp.Models.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("MenuItem");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.Driver", b =>
                {
                    b.HasOne("FoodDeliveryApp.Models.ApplicationUser", "User")
                        .WithOne("Driver")
                        .HasForeignKey("FoodDeliveryApp.Models.Driver", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.Favorite", b =>
                {
                    b.HasOne("FoodDeliveryApp.Models.MenuItem", "MenuItem")
                        .WithMany()
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApp.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.MenuItem", b =>
                {
                    b.HasOne("FoodDeliveryApp.Models.MenuItemCategory", "Category")
                        .WithMany("MenuItems")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FoodDeliveryApp.Models.RestaurantCategory", null)
                        .WithMany("MenuItems")
                        .HasForeignKey("RestaurantCategoryId");

                    b.HasOne("FoodDeliveryApp.Models.Restaurant", "Restaurant")
                        .WithMany("MenuItems")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.MenuItemCategory", b =>
                {
                    b.HasOne("FoodDeliveryApp.Models.Restaurant", null)
                        .WithMany("Categories")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.Order", b =>
                {
                    b.HasOne("FoodDeliveryApp.Models.Address", "DeliveryAddress")
                        .WithMany()
                        .HasForeignKey("DeliveryAddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApp.Models.Driver", "Driver")
                        .WithMany("Orders")
                        .HasForeignKey("DriverId");

                    b.HasOne("FoodDeliveryApp.Models.Restaurant", null)
                        .WithMany("Orders")
                        .HasForeignKey("RestaurantId");

                    b.HasOne("FoodDeliveryApp.Models.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DeliveryAddress");

                    b.Navigation("Driver");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.OrderItem", b =>
                {
                    b.HasOne("FoodDeliveryApp.Models.MenuItem", "MenuItem")
                        .WithMany("OrderItems")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApp.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApp.Models.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MenuItem");

                    b.Navigation("Order");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.OrderTracking", b =>
                {
                    b.HasOne("FoodDeliveryApp.Models.Address", "DeliveryAddress")
                        .WithMany()
                        .HasForeignKey("DeliveryAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApp.Models.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApp.Models.Order", "Order")
                        .WithMany("TrackingHistory")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryAddress");

                    b.Navigation("Driver");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.Promotion", b =>
                {
                    b.HasOne("FoodDeliveryApp.Models.Restaurant", "Restaurant")
                        .WithMany("Promotions")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.Restaurant", b =>
                {
                    b.HasOne("FoodDeliveryApp.Models.ApplicationUser", null)
                        .WithMany("Restaurants")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("FoodDeliveryApp.Models.RestaurantCategory", "Category")
                        .WithMany("Restaurants")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApp.Models.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.Review", b =>
                {
                    b.HasOne("FoodDeliveryApp.Models.MenuItem", "MenuItem")
                        .WithMany("Reviews")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FoodDeliveryApp.Models.Restaurant", "Restaurant")
                        .WithMany("Reviews")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FoodDeliveryApp.Models.ApplicationUser", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FoodDeliveryApp.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FoodDeliveryApp.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApp.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FoodDeliveryApp.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.ApplicationUser", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Driver");

                    b.Navigation("Orders");

                    b.Navigation("Restaurants");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.Cart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.Driver", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.MenuItem", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.MenuItemCategory", b =>
                {
                    b.Navigation("MenuItems");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("TrackingHistory");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.Restaurant", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("MenuItems");

                    b.Navigation("Orders");

                    b.Navigation("Promotions");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.RestaurantCategory", b =>
                {
                    b.Navigation("MenuItems");

                    b.Navigation("Restaurants");
                });
#pragma warning restore 612, 618
        }
    }
}
