// <auto-generated />
using System;
using FoodDeliveryApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FoodDeliveryApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250425233830_updateCartMenuitemOptions")]
    partial class updateCartMenuitemOptions
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("FoodDeliveryApp.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CustomerProfileId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerProfileId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "New York",
                            Country = "USA",
                            CreatedAt = new DateTime(2025, 3, 27, 23, 38, 28, 13, DateTimeKind.Utc).AddTicks(3273),
                            CustomerProfileId = 1,
                            IsDefault = true,
                            PostalCode = "10001",
                            State = "NY",
                            Street = "123 Main St",
                            Title = "Home"
                        },
                        new
                        {
                            Id = 2,
                            City = "New York",
                            Country = "USA",
                            CreatedAt = new DateTime(2025, 4, 5, 23, 38, 28, 13, DateTimeKind.Utc).AddTicks(3273),
                            CustomerProfileId = 1,
                            IsDefault = false,
                            PostalCode = "10002",
                            State = "NY",
                            Street = "456 Work Ave",
                            Title = "Home"
                        });
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "962416c7-e58e-49ce-be48-741265a8782e",
                            CreatedAt = new DateTime(2025, 4, 25, 23, 38, 28, 13, DateTimeKind.Utc).AddTicks(3273),
                            Email = "admin@foodfast.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@FOODFAST.COM",
                            NormalizedUserName = "ADMIN@FOODFAST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIdbcpYUGmuVG34NFVtC167rK9cL3qhrCooE18Q/uEYi0FKnxCm+soHMHEJhqBrapQ==",
                            PhoneNumber = "555-000-0000",
                            PhoneNumberConfirmed = true,
                            Role = 2,
                            SecurityStamp = "6d9eb882-84f8-4561-a2d6-155a26f5e363",
                            TwoFactorEnabled = false,
                            UserName = "admin@foodfast.com"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cdc9c9ac-43f4-4b72-868e-2b13da6a4769",
                            CreatedAt = new DateTime(2025, 4, 25, 23, 38, 28, 13, DateTimeKind.Utc).AddTicks(3273),
                            Email = "customer@foodfast.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER@FOODFAST.COM",
                            NormalizedUserName = "CUSTOMER@FOODFAST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAkqjZkCiKn/0nMAQwCqjnfycq4PMv/t/njCDWTe3tCIwCLssWQ2Vcu5r+OoMfaAHA==",
                            PhoneNumber = "555-111-1111",
                            PhoneNumberConfirmed = true,
                            Role = 0,
                            SecurityStamp = "8ecc309a-b054-4260-a5c1-69f976a3a097",
                            TwoFactorEnabled = false,
                            UserName = "customer@foodfast.com"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "87c25fc1-bf1e-4564-879f-e73e9325a604",
                            CreatedAt = new DateTime(2025, 4, 25, 23, 38, 28, 13, DateTimeKind.Utc).AddTicks(3273),
                            Email = "employee@foodfast.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPLOYEE@FOODFAST.COM",
                            NormalizedUserName = "EMPLOYEE@FOODFAST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAED7Vot7V/Moh0+yEvXWu2iGUAUWihGTAOqI223jqfGuZ/T6o8tiLakQV8c6XDoVP7A==",
                            PhoneNumber = "555-222-2222",
                            PhoneNumberConfirmed = true,
                            Role = 1,
                            SecurityStamp = "ecabbe9c-f266-4a1a-8607-8e2738cf1f8e",
                            TwoFactorEnabled = false,
                            UserName = "employee@foodfast.com"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a03c5a2e-b94d-43f5-a30b-3a75c92dbccc",
                            CreatedAt = new DateTime(2025, 4, 25, 23, 38, 28, 13, DateTimeKind.Utc).AddTicks(3273),
                            Email = "owner@foodfast.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OWNER@FOODFAST.COM",
                            NormalizedUserName = "OWNER@FOODFAST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDhrFqQ4kYJp5r2gSyfdbH5xE4PaNE4cxob90zcnDhFa95Hw2NYeSn1CsBqfkUEV2A==",
                            PhoneNumber = "555-333-3333",
                            PhoneNumberConfirmed = true,
                            Role = 3,
                            SecurityStamp = "4b9a2d8d-0168-4a0a-894d-6b5691fa5e49",
                            TwoFactorEnabled = false,
                            UserName = "owner@foodfast.com"
                        });
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.CustomerProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("LoyaltyPoints")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ProfilePictureUrl")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("ReceivePromotions")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("CustomerProfiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 3, 26, 23, 38, 28, 13, DateTimeKind.Utc).AddTicks(3273),
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "John",
                            IsActive = true,
                            LastName = "Doe",
                            LoyaltyPoints = 0m,
                            PhoneNumber = "555-111-1111",
                            ProfilePictureUrl = "/images/users/user2.jpg",
                            ReceivePromotions = false,
                            UpdatedAt = new DateTime(2025, 4, 25, 23, 38, 28, 13, DateTimeKind.Utc).AddTicks(3273),
                            UserId = "2"
                        });
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.CustomizationChoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CustomizationOptionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("CustomizationOptionId");

                    b.ToTable("CustomizationChoices");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.CustomizationOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowMultiple")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MenuItemId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.ToTable("CustomizationOptions");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.EmployeeProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<string>("ProfilePictureUrl")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("TerminationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("EmployeeProfiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 10, 25, 23, 38, 28, 13, DateTimeKind.Utc).AddTicks(3273),
                            FirstName = "Jane",
                            HireDate = new DateTime(2024, 10, 25, 23, 38, 28, 13, DateTimeKind.Utc).AddTicks(3273),
                            IsActive = true,
                            LastName = "Smith",
                            PhoneNumber = "555-222-2222",
                            Position = 1,
                            UpdatedAt = new DateTime(2025, 4, 25, 23, 38, 28, 13, DateTimeKind.Utc).AddTicks(3273),
                            UserId = "3"
                        });
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.MenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("MenuItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 3, 27, 23, 38, 28, 13, DateTimeKind.Utc).AddTicks(3273),
                            Description = "Classic pasta with eggs, cheese, pancetta, and pepper",
                            ImageUrl = "/images/menu/carbonara.jpg",
                            IsAvailable = true,
                            Name = "Spaghetti Carbonara",
                            Price = 14.99m,
                            RestaurantId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 3, 27, 23, 38, 28, 13, DateTimeKind.Utc).AddTicks(3273),
                            Description = "Traditional pizza with tomato sauce, mozzarella, and basil",
                            ImageUrl = "/images/menu/pizza.jpg",
                            IsAvailable = true,
                            Name = "Margherita Pizza",
                            Price = 12.99m,
                            RestaurantId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 4, 1, 23, 38, 28, 13, DateTimeKind.Utc).AddTicks(3273),
                            Description = "Grilled tortilla filled with cheese and chicken",
                            ImageUrl = "/images/menu/quesadilla.jpg",
                            IsAvailable = true,
                            Name = "Chicken Quesadilla",
                            Price = 9.99m,
                            RestaurantId = 2
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 4, 1, 23, 38, 28, 13, DateTimeKind.Utc).AddTicks(3273),
                            Description = "Large flour tortilla with beef, rice, and beans",
                            ImageUrl = "/images/menu/burrito.jpg",
                            IsAvailable = true,
                            Name = "Beef Burrito",
                            Price = 11.99m,
                            RestaurantId = 2
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 4, 6, 23, 38, 28, 13, DateTimeKind.Utc).AddTicks(3273),
                            Description = "Crispy chicken in a sweet and spicy sauce",
                            ImageUrl = "/images/menu/general-tsos.jpg",
                            IsAvailable = true,
                            Name = "General Tso's Chicken",
                            Price = 13.99m,
                            RestaurantId = 3
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 4, 6, 23, 38, 28, 13, DateTimeKind.Utc).AddTicks(3273),
                            Description = "Stir-fried noodles with mixed vegetables",
                            ImageUrl = "/images/menu/lo-mein.jpg",
                            IsAvailable = true,
                            Name = "Vegetable Lo Mein",
                            Price = 10.99m,
                            RestaurantId = 3
                        });
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CustomerProfileId")
                        .HasColumnType("int");

                    b.Property<string>("DeliveryAddress")
                        .HasColumnType("longtext");

                    b.Property<decimal>("DeliveryFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("EmployeeProfileId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PaymentDetails")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("PaymentMethodType")
                        .HasColumnType("int");

                    b.Property<int?>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<string>("SpecialInstructions")
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerProfileId");

                    b.HasIndex("EmployeeProfileId");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MenuItemId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<string>("SpecialInstructions")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MenuItemId = 1,
                            OrderId = 1,
                            Price = 14.99m,
                            Quantity = 1,
                            RestaurantId = 1,
                            SpecialInstructions = "No cheese"
                        },
                        new
                        {
                            Id = 2,
                            MenuItemId = 3,
                            OrderId = 2,
                            Price = 9.99m,
                            Quantity = 2,
                            RestaurantId = 2,
                            SpecialInstructions = "Extra cheese, no beans"
                        });
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.OrderRestaurant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("OrderRestaurants");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 22.48m,
                            OrderId = 1,
                            PaymentDate = new DateTime(2025, 4, 16, 0, 38, 28, 13, DateTimeKind.Utc).AddTicks(3273),
                            PaymentMethodId = 1,
                            Status = 1,
                            TransactionId = "PAY-123456789"
                        },
                        new
                        {
                            Id = 2,
                            Amount = 17.78m,
                            OrderId = 2,
                            PaymentDate = new DateTime(2025, 4, 21, 0, 38, 28, 13, DateTimeKind.Utc).AddTicks(3273),
                            PaymentMethodId = 1,
                            Status = 1,
                            TransactionId = "PAY-987654321"
                        });
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountNumberMasked")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CustomerProfileId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerProfileId");

                    b.HasIndex("UserId");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountNumberMasked = "************1234",
                            CreatedAt = new DateTime(2025, 3, 28, 23, 38, 28, 13, DateTimeKind.Utc).AddTicks(3273),
                            IsDefault = true,
                            Provider = "Visa",
                            Type = 0,
                            UserId = "2"
                        },
                        new
                        {
                            Id = 2,
                            AccountNumberMasked = "********@paypal.com",
                            CreatedAt = new DateTime(2025, 4, 11, 23, 38, 28, 13, DateTimeKind.Utc).AddTicks(3273),
                            IsDefault = false,
                            Provider = "PayPal",
                            Type = 2,
                            UserId = "2"
                        });
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.Promotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPercentage")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("MinimumOrderAmount")
                        .HasColumnType("int");

                    b.Property<int?>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UsageLimit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Promotions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "WELCOME20",
                            Description = "20% off your first order",
                            DiscountValue = 20m,
                            EndDate = new DateTime(2025, 5, 25, 23, 38, 28, 13, DateTimeKind.Utc).AddTicks(3273),
                            IsActive = true,
                            IsPercentage = true,
                            MinimumOrderAmount = 15,
                            StartDate = new DateTime(2025, 4, 15, 23, 38, 28, 13, DateTimeKind.Utc).AddTicks(3273),
                            UsageLimit = 1000
                        },
                        new
                        {
                            Id = 2,
                            Code = "ITALIAN10",
                            Description = "10% off all Italian restaurants",
                            DiscountValue = 10m,
                            EndDate = new DateTime(2025, 5, 10, 23, 38, 28, 13, DateTimeKind.Utc).AddTicks(3273),
                            IsActive = true,
                            IsPercentage = true,
                            RestaurantId = 1,
                            StartDate = new DateTime(2025, 4, 20, 23, 38, 28, 13, DateTimeKind.Utc).AddTicks(3273)
                        });
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.PromotionUsage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("PromotionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UsedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("PromotionId");

                    b.HasIndex("UserId");

                    b.ToTable("PromotionUsages");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.Restaurant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<TimeSpan>("ClosingTime")
                        .HasColumnType("time(6)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("DeliveryFee")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LocationUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<TimeSpan>("OpeningTime")
                        .HasColumnType("time(6)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(3,2)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Restaurants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Pasta Street",
                            CategoryId = 1,
                            City = "New York",
                            ClosingTime = new TimeSpan(0, 22, 0, 0, 0),
                            CreatedAt = new DateTime(2025, 3, 26, 23, 38, 28, 13, DateTimeKind.Utc).AddTicks(3273),
                            DeliveryFee = 0m,
                            Description = "Authentic Italian restaurant since 1985",
                            ImageUrl = "/images/restaurants/italian.jpg",
                            IsActive = true,
                            Name = "Mama Mia Italian",
                            OpeningTime = new TimeSpan(0, 11, 0, 0, 0),
                            OwnerId = "4",
                            PhoneNumber = "555-123-4567",
                            PostalCode = "10001",
                            Rating = 4.5m,
                            State = "NY",
                            TaxRate = 0m
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Salsa Avenue",
                            CategoryId = 2,
                            City = "Los Angeles",
                            ClosingTime = new TimeSpan(0, 23, 0, 0, 0),
                            CreatedAt = new DateTime(2025, 3, 31, 23, 38, 28, 13, DateTimeKind.Utc).AddTicks(3273),
                            DeliveryFee = 0m,
                            Description = "The best Mexican food in town",
                            ImageUrl = "/images/restaurants/mexican.jpg",
                            IsActive = true,
                            Name = "Taco Fiesta",
                            OpeningTime = new TimeSpan(0, 10, 0, 0, 0),
                            OwnerId = "4",
                            PhoneNumber = "555-234-5678",
                            PostalCode = "90001",
                            Rating = 4.2m,
                            State = "CA",
                            TaxRate = 0m
                        },
                        new
                        {
                            Id = 3,
                            Address = "789 Noodle Road",
                            CategoryId = 3,
                            City = "Chicago",
                            ClosingTime = new TimeSpan(0, 21, 30, 0, 0),
                            CreatedAt = new DateTime(2025, 4, 5, 23, 38, 28, 13, DateTimeKind.Utc).AddTicks(3273),
                            DeliveryFee = 0m,
                            Description = "Authentic Chinese cuisine",
                            ImageUrl = "/images/restaurants/asian.jpg",
                            IsActive = true,
                            Name = "Golden Wok",
                            OpeningTime = new TimeSpan(0, 10, 30, 0, 0),
                            OwnerId = "4",
                            PhoneNumber = "555-345-6789",
                            PostalCode = "60601",
                            Rating = 4.7m,
                            State = "IL",
                            TaxRate = 0m
                        });
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.RestaurantCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("RestaurantCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Authentic Italian cuisine",
                            Name = "Italian"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Traditional Mexican food",
                            Name = "Mexican"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Various Asian cuisines",
                            Name = "Asian"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Classic American dishes",
                            Name = "American"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Plant-based meals",
                            Name = "Vegetarian"
                        });
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CustomerProfileId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerProfileId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "Best Italian food I've ever had!",
                            CreatedAt = new DateTime(2025, 4, 16, 23, 38, 28, 13, DateTimeKind.Utc).AddTicks(3273),
                            CustomerProfileId = 1,
                            Rating = 5,
                            RestaurantId = 1
                        },
                        new
                        {
                            Id = 2,
                            Comment = "Great tacos, but a bit spicy for my taste.",
                            CreatedAt = new DateTime(2025, 4, 21, 23, 38, 28, 13, DateTimeKind.Utc).AddTicks(3273),
                            CustomerProfileId = 1,
                            Rating = 4,
                            RestaurantId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "cdf96290-9d4c-4ce0-b0d4-a29738ae3b2b",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "c2a26c88-c1b5-4538-b191-5906d3a9be53",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "7a0082ec-7e85-4ef9-b6df-37290bd339eb",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        },
                        new
                        {
                            Id = "4",
                            ConcurrencyStamp = "694de1f0-1a36-4c5f-9a51-987d87bf6e16",
                            Name = "Owner",
                            NormalizedName = "OWNER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "4",
                            RoleId = "4"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.Address", b =>
                {
                    b.HasOne("FoodDeliveryApp.Models.CustomerProfile", "CustomerProfile")
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerProfile");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.CustomerProfile", b =>
                {
                    b.HasOne("FoodDeliveryApp.Models.ApplicationUser", "User")
                        .WithOne("CustomerProfile")
                        .HasForeignKey("FoodDeliveryApp.Models.CustomerProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.CustomizationChoice", b =>
                {
                    b.HasOne("FoodDeliveryApp.Models.CustomizationOption", null)
                        .WithMany("Choices")
                        .HasForeignKey("CustomizationOptionId");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.CustomizationOption", b =>
                {
                    b.HasOne("FoodDeliveryApp.Models.MenuItem", "MenuItem")
                        .WithMany()
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.EmployeeProfile", b =>
                {
                    b.HasOne("FoodDeliveryApp.Models.ApplicationUser", "User")
                        .WithOne("EmployeeProfile")
                        .HasForeignKey("FoodDeliveryApp.Models.EmployeeProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.MenuItem", b =>
                {
                    b.HasOne("FoodDeliveryApp.Models.Restaurant", "Restaurant")
                        .WithMany("MenuItems")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.Order", b =>
                {
                    b.HasOne("FoodDeliveryApp.Models.CustomerProfile", null)
                        .WithMany("Orders")
                        .HasForeignKey("CustomerProfileId");

                    b.HasOne("FoodDeliveryApp.Models.EmployeeProfile", null)
                        .WithMany("DeliveryOrders")
                        .HasForeignKey("EmployeeProfileId");

                    b.HasOne("FoodDeliveryApp.Models.Restaurant", null)
                        .WithMany("Orders")
                        .HasForeignKey("RestaurantId");

                    b.HasOne("FoodDeliveryApp.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.OrderItem", b =>
                {
                    b.HasOne("FoodDeliveryApp.Models.MenuItem", "MenuItem")
                        .WithMany("OrderItems")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApp.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApp.Models.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");

                    b.Navigation("Order");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.OrderRestaurant", b =>
                {
                    b.HasOne("FoodDeliveryApp.Models.Order", "Order")
                        .WithMany("OrderRestaurants")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApp.Models.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.Payment", b =>
                {
                    b.HasOne("FoodDeliveryApp.Models.Order", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("FoodDeliveryApp.Models.Payment", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApp.Models.PaymentMethod", "PaymentMethod")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentMethodId");

                    b.Navigation("Order");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.PaymentMethod", b =>
                {
                    b.HasOne("FoodDeliveryApp.Models.CustomerProfile", null)
                        .WithMany("PaymentMethods")
                        .HasForeignKey("CustomerProfileId");

                    b.HasOne("FoodDeliveryApp.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.Promotion", b =>
                {
                    b.HasOne("FoodDeliveryApp.Models.Restaurant", "Restaurant")
                        .WithMany("Promotions")
                        .HasForeignKey("RestaurantId");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.PromotionUsage", b =>
                {
                    b.HasOne("FoodDeliveryApp.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApp.Models.Promotion", "Promotion")
                        .WithMany("PromotionUsages")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApp.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Promotion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.Restaurant", b =>
                {
                    b.HasOne("FoodDeliveryApp.Models.RestaurantCategory", "Category")
                        .WithMany("Restaurants")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApp.Models.ApplicationUser", "Owner")
                        .WithMany("Restaurants")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.Review", b =>
                {
                    b.HasOne("FoodDeliveryApp.Models.CustomerProfile", "CustomerProfile")
                        .WithMany("Reviews")
                        .HasForeignKey("CustomerProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApp.Models.Restaurant", "Restaurant")
                        .WithMany("Reviews")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerProfile");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FoodDeliveryApp.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FoodDeliveryApp.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApp.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FoodDeliveryApp.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.ApplicationUser", b =>
                {
                    b.Navigation("CustomerProfile");

                    b.Navigation("EmployeeProfile");

                    b.Navigation("Restaurants");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.CustomerProfile", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Orders");

                    b.Navigation("PaymentMethods");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.CustomizationOption", b =>
                {
                    b.Navigation("Choices");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.EmployeeProfile", b =>
                {
                    b.Navigation("DeliveryOrders");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.MenuItem", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("OrderRestaurants");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.PaymentMethod", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.Promotion", b =>
                {
                    b.Navigation("PromotionUsages");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.Restaurant", b =>
                {
                    b.Navigation("MenuItems");

                    b.Navigation("Orders");

                    b.Navigation("Promotions");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.RestaurantCategory", b =>
                {
                    b.Navigation("Restaurants");
                });
#pragma warning restore 612, 618
        }
    }
}
