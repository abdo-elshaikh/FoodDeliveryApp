// <auto-generated />
using System;
using FoodDeliveryApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FoodDeliveryApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250525213843_InitialApp")]
    partial class InitialApp
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FoodDeliveryApp.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerProfileId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerProfileId");

                    b.HasIndex("PostalCode");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "New York",
                            Country = "USA",
                            CreatedAt = new DateTime(2025, 4, 26, 21, 38, 42, 130, DateTimeKind.Utc).AddTicks(8343),
                            CustomerProfileId = 1,
                            IsDefault = true,
                            PostalCode = "10001",
                            State = "NY",
                            Street = "123 Main St",
                            Title = "Home"
                        },
                        new
                        {
                            Id = 2,
                            City = "New York",
                            Country = "USA",
                            CreatedAt = new DateTime(2025, 5, 5, 21, 38, 42, 130, DateTimeKind.Utc).AddTicks(8343),
                            CustomerProfileId = 1,
                            IsDefault = false,
                            PostalCode = "10002",
                            State = "NY",
                            Street = "456 Work Ave",
                            Title = "Home"
                        });
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Allergies")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("DefaultDeliveryAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultPaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DietaryPreferences")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FavoriteRestaurants")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("LoyaltyPoints")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethods")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PreferredLanguage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePictureUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("ReceivePromotions")
                        .HasColumnType("bit");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            Address = "",
                            Allergies = "[]",
                            Bio = "",
                            City = "",
                            ConcurrencyStamp = "2c091e02-b8bb-449e-9d8e-d36a480bc6a2",
                            Country = "",
                            CreatedAt = new DateTime(2025, 5, 25, 21, 38, 42, 130, DateTimeKind.Utc).AddTicks(8343),
                            DefaultDeliveryAddress = "",
                            DefaultPaymentMethod = "",
                            DietaryPreferences = "[]",
                            Email = "admin@foodfast.com",
                            EmailConfirmed = true,
                            FavoriteRestaurants = "[]",
                            FirstName = "Admin",
                            IsActive = true,
                            LastName = "User",
                            LockoutEnabled = false,
                            LoyaltyPoints = 0,
                            NormalizedEmail = "ADMIN@FOODFAST.COM",
                            NormalizedUserName = "ADMIN@FOODFAST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJEPBSn4hXT10ObtxdsvIMumozrnOT1Xt2SwW4ja4s/Tby6dDdaVS/0moK/1v5vAeQ==",
                            PaymentMethods = "[]",
                            PhoneNumber = "555-000-0000",
                            PhoneNumberConfirmed = true,
                            PostalCode = "",
                            PreferredLanguage = "en",
                            ProfilePictureUrl = "https://images.unsplash.com/photo-1519085360753-af0119f7cbe7?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&q=80",
                            ReceivePromotions = false,
                            Role = 2,
                            SecurityStamp = "37e2d654-73a0-4fbd-85f6-d5ae39009e78",
                            State = "",
                            TimeZone = "UTC",
                            TwoFactorEnabled = false,
                            UserName = "admin@foodfast.com"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            Address = "",
                            Allergies = "[]",
                            Bio = "",
                            City = "",
                            ConcurrencyStamp = "686be7d6-0581-48f4-a2ec-14e73de2a42c",
                            Country = "",
                            CreatedAt = new DateTime(2025, 5, 25, 21, 38, 42, 130, DateTimeKind.Utc).AddTicks(8343),
                            DefaultDeliveryAddress = "",
                            DefaultPaymentMethod = "",
                            DietaryPreferences = "[]",
                            Email = "customer@foodfast.com",
                            EmailConfirmed = true,
                            FavoriteRestaurants = "[]",
                            FirstName = "John",
                            IsActive = true,
                            LastName = "Doe",
                            LockoutEnabled = false,
                            LoyaltyPoints = 0,
                            NormalizedEmail = "CUSTOMER@FOODFAST.COM",
                            NormalizedUserName = "CUSTOMER@FOODFAST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEM8VeqIrHU9Oc5gtAZ1SsPb6xrm0wAtwDwcg7B1lT1/AgG+YTu0mneEasELs49mJUw==",
                            PaymentMethods = "[]",
                            PhoneNumber = "555-111-1111",
                            PhoneNumberConfirmed = true,
                            PostalCode = "",
                            PreferredLanguage = "en",
                            ProfilePictureUrl = "https://images.unsplash.com/photo-1535713875002-d1d0cf3356de?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&q=80",
                            ReceivePromotions = false,
                            Role = 0,
                            SecurityStamp = "9f84cda9-2017-4415-b1b3-a2af7c50c666",
                            State = "",
                            TimeZone = "UTC",
                            TwoFactorEnabled = false,
                            UserName = "customer@foodfast.com"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            Address = "",
                            Allergies = "[]",
                            Bio = "",
                            City = "",
                            ConcurrencyStamp = "963e73bb-29ab-4ba5-aec5-dd6c27f8fd58",
                            Country = "",
                            CreatedAt = new DateTime(2025, 5, 25, 21, 38, 42, 130, DateTimeKind.Utc).AddTicks(8343),
                            DefaultDeliveryAddress = "",
                            DefaultPaymentMethod = "",
                            DietaryPreferences = "[]",
                            Email = "employee@foodfast.com",
                            EmailConfirmed = true,
                            FavoriteRestaurants = "[]",
                            FirstName = "Jane",
                            IsActive = true,
                            LastName = "Smith",
                            LockoutEnabled = false,
                            LoyaltyPoints = 0,
                            NormalizedEmail = "EMPLOYEE@FOODFAST.COM",
                            NormalizedUserName = "EMPLOYEE@FOODFAST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGxCz3NDRXCoobBt7vHrs6y8XnpRTQFP2/rqIP0+p5Xqd1jSrMpeTOH1yNTS9WQXtQ==",
                            PaymentMethods = "[]",
                            PhoneNumber = "555-222-2222",
                            PhoneNumberConfirmed = true,
                            PostalCode = "",
                            PreferredLanguage = "en",
                            ProfilePictureUrl = "https://images.unsplash.com/photo-1494790108377-be9c29b29330?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&q=80",
                            ReceivePromotions = false,
                            Role = 1,
                            SecurityStamp = "958dc2c3-723d-45f8-986e-38ce96556e96",
                            State = "",
                            TimeZone = "UTC",
                            TwoFactorEnabled = false,
                            UserName = "employee@foodfast.com"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            Address = "",
                            Allergies = "[]",
                            Bio = "",
                            City = "",
                            ConcurrencyStamp = "e7f59f6a-a279-4715-9bac-16fb135dbd50",
                            Country = "",
                            CreatedAt = new DateTime(2025, 5, 25, 21, 38, 42, 130, DateTimeKind.Utc).AddTicks(8343),
                            DefaultDeliveryAddress = "",
                            DefaultPaymentMethod = "",
                            DietaryPreferences = "[]",
                            Email = "owner@foodfast.com",
                            EmailConfirmed = true,
                            FavoriteRestaurants = "[]",
                            FirstName = "Robert",
                            IsActive = true,
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            LoyaltyPoints = 0,
                            NormalizedEmail = "OWNER@FOODFAST.COM",
                            NormalizedUserName = "OWNER@FOODFAST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDb75AoZJFlJ6BSs9FKr0qEL81XtE93h0P6X9Kts1WrxaWX6+K1Syeoi0tfBR6VsRg==",
                            PaymentMethods = "[]",
                            PhoneNumber = "555-333-3333",
                            PhoneNumberConfirmed = true,
                            PostalCode = "",
                            PreferredLanguage = "en",
                            ProfilePictureUrl = "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&q=80",
                            ReceivePromotions = false,
                            Role = 3,
                            SecurityStamp = "7f47cc69-1b2b-47bb-a101-81daa3792e3c",
                            State = "",
                            TimeZone = "UTC",
                            TwoFactorEnabled = false,
                            UserName = "owner@foodfast.com"
                        });
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("MenuItemId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("MenuItemId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.CustomerProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("LoyaltyPoints")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProfilePictureUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("ReceivePromotions")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("CustomerProfiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 4, 25, 21, 38, 42, 130, DateTimeKind.Utc).AddTicks(8343),
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "John",
                            IsActive = true,
                            LastName = "Doe",
                            LoyaltyPoints = 0m,
                            PhoneNumber = "555-111-1111",
                            ProfilePictureUrl = "https://images.unsplash.com/photo-1535713875002-d1d0cf3356de?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&q=80",
                            ReceivePromotions = false,
                            UpdatedAt = new DateTime(2025, 5, 25, 21, 38, 42, 130, DateTimeKind.Utc).AddTicks(8343),
                            UserId = "2"
                        });
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.Customization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartItemId")
                        .HasColumnType("int");

                    b.Property<int>("ChoiceId")
                        .HasColumnType("int");

                    b.Property<int>("OptionId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CartItemId");

                    b.HasIndex("ChoiceId");

                    b.HasIndex("OptionId");

                    b.ToTable("Customizations");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.CustomizationChoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomizationOptionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomizationOptionId");

                    b.ToTable("CustomizationChoices");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.CustomizationOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowMultiple")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<int>("MenuItemId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.ToTable("CustomizationOptions");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.EmployeeProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<string>("ProfilePictureUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("TerminationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("EmployeeProfiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 11, 25, 21, 38, 42, 130, DateTimeKind.Utc).AddTicks(8343),
                            FirstName = "Jane",
                            HireDate = new DateTime(2024, 11, 25, 21, 38, 42, 130, DateTimeKind.Utc).AddTicks(8343),
                            IsActive = true,
                            LastName = "Smith",
                            PhoneNumber = "555-222-2222",
                            Position = 1,
                            UpdatedAt = new DateTime(2025, 5, 25, 21, 38, 42, 130, DateTimeKind.Utc).AddTicks(8343),
                            UserId = "3"
                        });
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.MenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("RestaurantCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("IsAvailable");

                    b.HasIndex("Name");

                    b.HasIndex("Price");

                    b.HasIndex("RestaurantCategoryId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("MenuItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 4, 26, 21, 38, 42, 130, DateTimeKind.Utc).AddTicks(8343),
                            Description = "Classic pasta with eggs, cheese, pancetta, and pepper",
                            ImageUrl = "https://images.unsplash.com/photo-1608897013039-887f21d8c804?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&q=80",
                            IsAvailable = true,
                            Name = "Spaghetti Carbonara",
                            Price = 14.99m,
                            RestaurantId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 4, 26, 21, 38, 42, 130, DateTimeKind.Utc).AddTicks(8343),
                            Description = "Traditional pizza with tomato sauce, mozzarella, and basil",
                            ImageUrl = "https://images.unsplash.com/photo-1574071318508-1cd1935f4db7?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&q=80",
                            IsAvailable = true,
                            Name = "Margherita Pizza",
                            Price = 12.99m,
                            RestaurantId = 1
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2025, 5, 1, 21, 38, 42, 130, DateTimeKind.Utc).AddTicks(8343),
                            Description = "Grilled tortilla filled with cheese and chicken",
                            ImageUrl = "https://images.unsplash.com/photo-1595877171414-6d34e1b0a5b1?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&q=80",
                            IsAvailable = true,
                            Name = "Chicken Quesadilla",
                            Price = 9.99m,
                            RestaurantId = 2
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2025, 5, 1, 21, 38, 42, 130, DateTimeKind.Utc).AddTicks(8343),
                            Description = "Large flour tortilla with beef, rice, and beans",
                            ImageUrl = "https://images.unsplash.com/photo-1626700051175-6818013e1d4f?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&q=80",
                            IsAvailable = true,
                            Name = "Beef Burrito",
                            Price = 11.99m,
                            RestaurantId = 2
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 5,
                            CreatedAt = new DateTime(2025, 5, 6, 21, 38, 42, 130, DateTimeKind.Utc).AddTicks(8343),
                            Description = "Crispy chicken in a sweet and spicy sauce",
                            ImageUrl = "https://images.unsplash.com/photo-1600891964092-4316d7c6a64e?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&q=80",
                            IsAvailable = true,
                            Name = "General Tso's Chicken",
                            Price = 13.99m,
                            RestaurantId = 3
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 5,
                            CreatedAt = new DateTime(2025, 5, 6, 21, 38, 42, 130, DateTimeKind.Utc).AddTicks(8343),
                            Description = "Stir-fried noodles with mixed vegetables",
                            ImageUrl = "https://images.unsplash.com/photo-1585032226651-618b368f4053?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&q=80",
                            IsAvailable = true,
                            Name = "Vegetable Lo Mein",
                            Price = 10.99m,
                            RestaurantId = 3
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 7,
                            CreatedAt = new DateTime(2025, 5, 11, 21, 38, 42, 130, DateTimeKind.Utc).AddTicks(8343),
                            Description = "Juicy beef burger with cheese, lettuce, and tomato",
                            ImageUrl = "https://images.unsplash.com/photo-1568901346375-23c9450c58cd?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&q=80",
                            IsAvailable = true,
                            Name = "Cheeseburger",
                            Price = 9.99m,
                            RestaurantId = 4
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 6,
                            CreatedAt = new DateTime(2025, 5, 11, 21, 38, 42, 130, DateTimeKind.Utc).AddTicks(8343),
                            Description = "Crisp romaine lettuce with Caesar dressing and croutons",
                            ImageUrl = "https://images.unsplash.com/photo-1550304943-4f24f54ddde9?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&q=80",
                            IsAvailable = true,
                            Name = "Caesar Salad",
                            Price = 8.99m,
                            RestaurantId = 4
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 7,
                            CreatedAt = new DateTime(2025, 5, 16, 21, 38, 42, 130, DateTimeKind.Utc).AddTicks(8343),
                            Description = "Plant-based burger with lettuce, tomato, and vegan mayo",
                            ImageUrl = "https://images.unsplash.com/photo-1550547660-d7ef7d7d5e2b?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&q=80",
                            IsAvailable = true,
                            Name = "Vegan Burger",
                            Price = 10.99m,
                            RestaurantId = 5
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 6,
                            CreatedAt = new DateTime(2025, 5, 16, 21, 38, 42, 130, DateTimeKind.Utc).AddTicks(8343),
                            Description = "Healthy salad with quinoa, mixed greens, and vinaigrette",
                            ImageUrl = "https://images.unsplash.com/photo-1512621776951-a57141f2eefd?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&q=80",
                            IsAvailable = true,
                            Name = "Quinoa Salad",
                            Price = 9.99m,
                            RestaurantId = 5
                        });
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.MenuItemCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MenuItemCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Delicious pasta dishes",
                            Name = "Pasta"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Classic and gourmet pizzas",
                            Name = "Pizza"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Authentic Mexican tacos",
                            Name = "Tacos"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Hearty burritos with various fillings",
                            Name = "Burritos"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Asian-style noodles and stir-fries",
                            Name = "Noodles"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Fresh and healthy salads",
                            Name = "Salads"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Juicy burgers with various toppings",
                            Name = "Burgers"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Sweet treats and desserts",
                            Name = "Desserts"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Drinks and beverages",
                            Name = "Beverages"
                        });
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CustomerProfileId")
                        .HasColumnType("int");

                    b.Property<int?>("DeliveryAddressId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DeliveryFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DeliveryInstructions")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("EmployeeProfileId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EstimatedDeliveryTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentDetails")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PaymentMethodType")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<string>("SpecialInstructions")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TrackingUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerProfileId");

                    b.HasIndex("DeliveryAddressId");

                    b.HasIndex("EmployeeProfileId");

                    b.HasIndex("OrderDate");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("Status");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DeliveryAddressId = 1,
                            DeliveryFee = 3.99m,
                            Discount = 0m,
                            OrderDate = new DateTime(2025, 5, 15, 21, 38, 42, 130, DateTimeKind.Utc).AddTicks(8343),
                            PaymentMethodType = 0,
                            RestaurantId = 1,
                            SpecialInstructions = "Please knock loudly",
                            Status = 5,
                            Subtotal = 14.99m,
                            Tax = 1.50m,
                            Total = 20.48m,
                            UserId = "2"
                        },
                        new
                        {
                            Id = 2,
                            DeliveryAddressId = 1,
                            DeliveryFee = 2.99m,
                            Discount = 0m,
                            OrderDate = new DateTime(2025, 5, 20, 21, 38, 42, 130, DateTimeKind.Utc).AddTicks(8343),
                            PaymentMethodType = 0,
                            RestaurantId = 2,
                            SpecialInstructions = "Extra napkins please",
                            Status = 5,
                            Subtotal = 19.98m,
                            Tax = 1.15m,
                            Total = 24.12m,
                            UserId = "2"
                        });
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.OrderCustomization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChoiceId")
                        .HasColumnType("int");

                    b.Property<int>("OptionId")
                        .HasColumnType("int");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ChoiceId");

                    b.HasIndex("OptionId");

                    b.HasIndex("OrderItemId");

                    b.ToTable("OrderCustomizations");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MenuItemId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<string>("SpecialInstructions")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MenuItemId = 1,
                            OrderId = 1,
                            Price = 14.99m,
                            Quantity = 1,
                            RestaurantId = 1,
                            SpecialInstructions = "No cheese"
                        },
                        new
                        {
                            Id = 2,
                            MenuItemId = 3,
                            OrderId = 2,
                            Price = 9.99m,
                            Quantity = 2,
                            RestaurantId = 2,
                            SpecialInstructions = "Extra cheese, no beans"
                        });
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.Restaurant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<TimeSpan>("ClosingTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DeliveryFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LocationUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<TimeSpan>("OpeningTime")
                        .HasColumnType("time");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(3,2)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(5,4)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("City");

                    b.HasIndex("Name");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PostalCode");

                    b.ToTable("Restaurants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Pasta Street",
                            CategoryId = 1,
                            City = "New York",
                            ClosingTime = new TimeSpan(0, 22, 0, 0, 0),
                            CreatedAt = new DateTime(2025, 4, 25, 21, 38, 42, 130, DateTimeKind.Utc).AddTicks(8343),
                            DeliveryFee = 0m,
                            Description = "Authentic Italian restaurant since 1985",
                            ImageUrl = "https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80",
                            IsActive = true,
                            Name = "Mama Mia Italian",
                            OpeningTime = new TimeSpan(0, 11, 0, 0, 0),
                            OwnerId = "4",
                            PhoneNumber = "555-123-4567",
                            PostalCode = "10001",
                            Rating = 0m,
                            State = "NY",
                            TaxRate = 0m
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Salsa Avenue",
                            CategoryId = 2,
                            City = "Los Angeles",
                            ClosingTime = new TimeSpan(0, 23, 0, 0, 0),
                            CreatedAt = new DateTime(2025, 4, 30, 21, 38, 42, 130, DateTimeKind.Utc).AddTicks(8343),
                            DeliveryFee = 0m,
                            Description = "The best Mexican food in town",
                            ImageUrl = "https://images.unsplash.com/photo-1551504734-5ee1c4a1479b?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80",
                            IsActive = true,
                            Name = "Taco Fiesta",
                            OpeningTime = new TimeSpan(0, 10, 0, 0, 0),
                            OwnerId = "4",
                            PhoneNumber = "555-234-5678",
                            PostalCode = "90001",
                            Rating = 0m,
                            State = "CA",
                            TaxRate = 0m
                        },
                        new
                        {
                            Id = 3,
                            Address = "789 Noodle Road",
                            CategoryId = 3,
                            City = "Chicago",
                            ClosingTime = new TimeSpan(0, 21, 30, 0, 0),
                            CreatedAt = new DateTime(2025, 5, 5, 21, 38, 42, 130, DateTimeKind.Utc).AddTicks(8343),
                            DeliveryFee = 0m,
                            Description = "Authentic Chinese cuisine",
                            ImageUrl = "https://images.unsplash.com/photo-1552566626-52f8b828add9?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80",
                            IsActive = true,
                            Name = "Golden Wok",
                            OpeningTime = new TimeSpan(0, 10, 30, 0, 0),
                            OwnerId = "4",
                            PhoneNumber = "555-345-6789",
                            PostalCode = "60601",
                            Rating = 0m,
                            State = "IL",
                            TaxRate = 0m
                        },
                        new
                        {
                            Id = 4,
                            Address = "321 Burger Blvd",
                            CategoryId = 4,
                            City = "Houston",
                            ClosingTime = new TimeSpan(0, 23, 0, 0, 0),
                            CreatedAt = new DateTime(2025, 5, 10, 21, 38, 42, 130, DateTimeKind.Utc).AddTicks(8343),
                            DeliveryFee = 0m,
                            Description = "Best burgers in the city",
                            ImageUrl = "https://images.unsplash.com/photo-1551782450-a2132b4a6d74?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80",
                            IsActive = true,
                            Name = "Burger Haven",
                            OpeningTime = new TimeSpan(0, 11, 0, 0, 0),
                            OwnerId = "4",
                            PhoneNumber = "555-456-7890",
                            PostalCode = "77001",
                            Rating = 0m,
                            State = "TX",
                            TaxRate = 0m
                        },
                        new
                        {
                            Id = 5,
                            Address = "654 Veggie Lane",
                            CategoryId = 5,
                            City = "San Francisco",
                            ClosingTime = new TimeSpan(0, 22, 0, 0, 0),
                            CreatedAt = new DateTime(2025, 5, 15, 21, 38, 42, 130, DateTimeKind.Utc).AddTicks(8343),
                            DeliveryFee = 0m,
                            Description = "Delicious vegetarian and vegan options",
                            ImageUrl = "https://images.unsplash.com/photo-1540420773420-3366772f4999?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80",
                            IsActive = true,
                            Name = "Green Plate",
                            OpeningTime = new TimeSpan(0, 10, 0, 0, 0),
                            OwnerId = "4",
                            PhoneNumber = "555-567-8901",
                            PostalCode = "94101",
                            Rating = 0m,
                            State = "CA",
                            TaxRate = 0m
                        });
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.RestaurantCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("RestaurantCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Authentic Italian cuisine",
                            Name = "Italian"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Traditional Mexican food",
                            Name = "Mexican"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Various Asian cuisines",
                            Name = "Asian"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Classic American dishes",
                            Name = "American"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Plant-based meals",
                            Name = "Vegetarian"
                        });
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.SearchHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Query")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("SearchDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Query");

                    b.HasIndex("SearchDate");

                    b.HasIndex("UserId");

                    b.ToTable("SearchHistory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "9a4decae-6ce3-4179-ae4a-16539ba89423",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "3e859bdd-e0ab-4c91-97fe-b2576cc4d7c0",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "1fa42bea-db05-4012-a1e4-162a99533340",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        },
                        new
                        {
                            Id = "4",
                            ConcurrencyStamp = "7feef34c-28bc-448b-9f2c-0a6c900aa432",
                            Name = "Owner",
                            NormalizedName = "OWNER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 20.48m,
                            OrderId = 1,
                            PaymentDate = new DateTime(2025, 5, 15, 22, 38, 42, 130, DateTimeKind.Utc).AddTicks(8343),
                            PaymentMethodId = 1,
                            Status = 1,
                            TransactionId = "PAY-123456789",
                            UserId = "2"
                        },
                        new
                        {
                            Id = 2,
                            Amount = 24.12m,
                            OrderId = 2,
                            PaymentDate = new DateTime(2025, 5, 20, 22, 38, 42, 130, DateTimeKind.Utc).AddTicks(8343),
                            PaymentMethodId = 1,
                            Status = 1,
                            TransactionId = "PAY-987654321",
                            UserId = "2"
                        });
                });

            modelBuilder.Entity("PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountNumberMasked")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerProfileId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerProfileId");

                    b.HasIndex("UserId");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountNumberMasked = "************1234",
                            CreatedAt = new DateTime(2025, 4, 27, 21, 38, 42, 130, DateTimeKind.Utc).AddTicks(8343),
                            IsDefault = true,
                            Provider = "Visa",
                            Type = 0,
                            UserId = "2"
                        },
                        new
                        {
                            Id = 2,
                            AccountNumberMasked = "********@paypal.com",
                            CreatedAt = new DateTime(2025, 5, 11, 21, 38, 42, 130, DateTimeKind.Utc).AddTicks(8343),
                            IsDefault = false,
                            Provider = "PayPal",
                            Type = 2,
                            UserId = "2"
                        });
                });

            modelBuilder.Entity("Promotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPercentage")
                        .HasColumnType("bit");

                    b.Property<decimal?>("MinimumOrderAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UsageLimit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("RestaurantId");

                    b.ToTable("Promotions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "WELCOME20",
                            Description = "20% off your first order",
                            DiscountValue = 20m,
                            EndDate = new DateTime(2025, 6, 24, 21, 38, 42, 130, DateTimeKind.Utc).AddTicks(8343),
                            IsActive = true,
                            IsPercentage = true,
                            MinimumOrderAmount = 15m,
                            StartDate = new DateTime(2025, 5, 15, 21, 38, 42, 130, DateTimeKind.Utc).AddTicks(8343),
                            UsageLimit = 1000
                        },
                        new
                        {
                            Id = 2,
                            Code = "ITALIAN10",
                            Description = "10% off all Italian restaurants",
                            DiscountValue = 10m,
                            EndDate = new DateTime(2025, 6, 9, 21, 38, 42, 130, DateTimeKind.Utc).AddTicks(8343),
                            IsActive = true,
                            IsPercentage = true,
                            RestaurantId = 1,
                            StartDate = new DateTime(2025, 5, 20, 21, 38, 42, 130, DateTimeKind.Utc).AddTicks(8343)
                        });
                });

            modelBuilder.Entity("PromotionUsage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("PromotionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UsedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("PromotionId");

                    b.HasIndex("UserId");

                    b.ToTable("PromotionUsages");
                });

            modelBuilder.Entity("Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerProfileId")
                        .HasColumnType("int");

                    b.Property<int?>("MenuItemId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(2,1)");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerProfileId");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "Best Italian food I've ever had!",
                            CreatedAt = new DateTime(2025, 5, 16, 21, 38, 42, 130, DateTimeKind.Utc).AddTicks(8343),
                            CustomerProfileId = 1,
                            Rating = 5.0m,
                            RestaurantId = 1
                        },
                        new
                        {
                            Id = 2,
                            Comment = "Great tacos, but a bit spicy for my taste.",
                            CreatedAt = new DateTime(2025, 5, 21, 21, 38, 42, 130, DateTimeKind.Utc).AddTicks(8343),
                            CustomerProfileId = 1,
                            Rating = 4.5m,
                            RestaurantId = 2
                        },
                        new
                        {
                            Id = 3,
                            Comment = "Good Chinese food, but the service was slow.",
                            CreatedAt = new DateTime(2025, 5, 23, 21, 38, 42, 130, DateTimeKind.Utc).AddTicks(8343),
                            CustomerProfileId = 1,
                            Rating = 4.0m,
                            RestaurantId = 3
                        },
                        new
                        {
                            Id = 4,
                            Comment = "Decent food, but not as good as I expected.",
                            CreatedAt = new DateTime(2025, 5, 24, 21, 38, 42, 130, DateTimeKind.Utc).AddTicks(8343),
                            CustomerProfileId = 1,
                            Rating = 3.5m,
                            RestaurantId = 1
                        },
                        new
                        {
                            Id = 5,
                            Comment = "Loved the burrito, will order again!",
                            CreatedAt = new DateTime(2025, 5, 22, 21, 38, 42, 130, DateTimeKind.Utc).AddTicks(8343),
                            CustomerProfileId = 1,
                            Rating = 4.0m,
                            RestaurantId = 2
                        },
                        new
                        {
                            Id = 6,
                            Comment = "The best General Tso's chicken in town!",
                            CreatedAt = new DateTime(2025, 5, 23, 21, 38, 42, 130, DateTimeKind.Utc).AddTicks(8343),
                            CustomerProfileId = 1,
                            Rating = 5.0m,
                            RestaurantId = 3
                        },
                        new
                        {
                            Id = 7,
                            Comment = "Great pizza, but a bit overpriced.",
                            CreatedAt = new DateTime(2025, 5, 24, 21, 38, 42, 130, DateTimeKind.Utc).AddTicks(8343),
                            CustomerProfileId = 1,
                            Rating = 4.5m,
                            RestaurantId = 1
                        },
                        new
                        {
                            Id = 8,
                            Comment = "Good food, but the delivery was late.",
                            CreatedAt = new DateTime(2025, 5, 22, 21, 38, 42, 130, DateTimeKind.Utc).AddTicks(8343),
                            CustomerProfileId = 1,
                            Rating = 4.0m,
                            RestaurantId = 2
                        });
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.Address", b =>
                {
                    b.HasOne("FoodDeliveryApp.Models.CustomerProfile", "CustomerProfile")
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerProfile");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.ApplicationUser", b =>
                {
                    b.OwnsOne("FoodDeliveryApp.Models.NotificationPreferences", "NotificationPreferences", b1 =>
                        {
                            b1.Property<string>("ApplicationUserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<bool?>("EmailNotifications")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bit")
                                .HasDefaultValue(true);

                            b1.Property<bool?>("Newsletter")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bit")
                                .HasDefaultValue(false);

                            b1.Property<bool?>("OrderUpdates")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bit")
                                .HasDefaultValue(true);

                            b1.Property<bool?>("Promotions")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bit")
                                .HasDefaultValue(true);

                            b1.Property<bool?>("PushNotifications")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bit")
                                .HasDefaultValue(true);

                            b1.Property<bool?>("SMSNotifications")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bit")
                                .HasDefaultValue(true);

                            b1.HasKey("ApplicationUserId");

                            b1.ToTable("AspNetUsers");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationUserId");

                            b1.HasData(
                                new
                                {
                                    ApplicationUserId = "1",
                                    EmailNotifications = true,
                                    Newsletter = false,
                                    OrderUpdates = true,
                                    Promotions = true,
                                    PushNotifications = true,
                                    SMSNotifications = true
                                },
                                new
                                {
                                    ApplicationUserId = "2",
                                    EmailNotifications = true,
                                    Newsletter = true,
                                    OrderUpdates = true,
                                    Promotions = true,
                                    PushNotifications = true,
                                    SMSNotifications = true
                                },
                                new
                                {
                                    ApplicationUserId = "3",
                                    EmailNotifications = true,
                                    Newsletter = false,
                                    OrderUpdates = true,
                                    Promotions = false,
                                    PushNotifications = true,
                                    SMSNotifications = false
                                },
                                new
                                {
                                    ApplicationUserId = "4",
                                    EmailNotifications = true,
                                    Newsletter = true,
                                    OrderUpdates = true,
                                    Promotions = true,
                                    PushNotifications = true,
                                    SMSNotifications = true
                                });
                        });

                    b.OwnsOne("FoodDeliveryApp.Models.PrivacySettings", "PrivacySettings", b1 =>
                        {
                            b1.Property<string>("ApplicationUserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<bool?>("ShareDataWithPartners")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bit")
                                .HasDefaultValue(false);

                            b1.Property<bool?>("ShowFullName")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bit")
                                .HasDefaultValue(true);

                            b1.Property<bool?>("ShowLocation")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bit")
                                .HasDefaultValue(true);

                            b1.Property<bool?>("ShowOrderHistory")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bit")
                                .HasDefaultValue(false);

                            b1.Property<bool?>("ShowProfilePicture")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bit")
                                .HasDefaultValue(true);

                            b1.HasKey("ApplicationUserId");

                            b1.ToTable("AspNetUsers");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationUserId");

                            b1.HasData(
                                new
                                {
                                    ApplicationUserId = "1",
                                    ShareDataWithPartners = false,
                                    ShowFullName = true,
                                    ShowLocation = true,
                                    ShowOrderHistory = false,
                                    ShowProfilePicture = false
                                },
                                new
                                {
                                    ApplicationUserId = "2",
                                    ShareDataWithPartners = false,
                                    ShowFullName = true,
                                    ShowLocation = true,
                                    ShowOrderHistory = true,
                                    ShowProfilePicture = true
                                },
                                new
                                {
                                    ApplicationUserId = "3",
                                    ShareDataWithPartners = false,
                                    ShowFullName = true,
                                    ShowLocation = false,
                                    ShowOrderHistory = false,
                                    ShowProfilePicture = true
                                },
                                new
                                {
                                    ApplicationUserId = "4",
                                    ShareDataWithPartners = true,
                                    ShowFullName = true,
                                    ShowLocation = true,
                                    ShowOrderHistory = true,
                                    ShowProfilePicture = true
                                });
                        });

                    b.Navigation("NotificationPreferences")
                        .IsRequired();

                    b.Navigation("PrivacySettings")
                        .IsRequired();
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.Cart", b =>
                {
                    b.HasOne("FoodDeliveryApp.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.CartItem", b =>
                {
                    b.HasOne("FoodDeliveryApp.Models.Cart", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApp.Models.MenuItem", "MenuItem")
                        .WithMany()
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("MenuItem");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.CustomerProfile", b =>
                {
                    b.HasOne("FoodDeliveryApp.Models.ApplicationUser", "User")
                        .WithOne("CustomerProfile")
                        .HasForeignKey("FoodDeliveryApp.Models.CustomerProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.Customization", b =>
                {
                    b.HasOne("FoodDeliveryApp.Models.CartItem", "CartItem")
                        .WithMany("Customizations")
                        .HasForeignKey("CartItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApp.Models.CustomizationChoice", "Choice")
                        .WithMany()
                        .HasForeignKey("ChoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApp.Models.CustomizationOption", "Option")
                        .WithMany()
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CartItem");

                    b.Navigation("Choice");

                    b.Navigation("Option");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.CustomizationChoice", b =>
                {
                    b.HasOne("FoodDeliveryApp.Models.CustomizationOption", "CustomizationOption")
                        .WithMany("Choices")
                        .HasForeignKey("CustomizationOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomizationOption");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.CustomizationOption", b =>
                {
                    b.HasOne("FoodDeliveryApp.Models.MenuItem", "MenuItem")
                        .WithMany("CustomizationOptions")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.EmployeeProfile", b =>
                {
                    b.HasOne("FoodDeliveryApp.Models.ApplicationUser", "User")
                        .WithOne("EmployeeProfile")
                        .HasForeignKey("FoodDeliveryApp.Models.EmployeeProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.MenuItem", b =>
                {
                    b.HasOne("FoodDeliveryApp.Models.MenuItemCategory", "Category")
                        .WithMany("MenuItems")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("FoodDeliveryApp.Models.RestaurantCategory", null)
                        .WithMany("MenuItems")
                        .HasForeignKey("RestaurantCategoryId");

                    b.HasOne("FoodDeliveryApp.Models.Restaurant", "Restaurant")
                        .WithMany("MenuItems")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.Order", b =>
                {
                    b.HasOne("FoodDeliveryApp.Models.CustomerProfile", null)
                        .WithMany("Orders")
                        .HasForeignKey("CustomerProfileId");

                    b.HasOne("FoodDeliveryApp.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("DeliveryAddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FoodDeliveryApp.Models.EmployeeProfile", null)
                        .WithMany("DeliveryOrders")
                        .HasForeignKey("EmployeeProfileId");

                    b.HasOne("FoodDeliveryApp.Models.Restaurant", "Restaurant")
                        .WithMany("Orders")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApp.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.OrderCustomization", b =>
                {
                    b.HasOne("FoodDeliveryApp.Models.CustomizationChoice", "CustomizationChoice")
                        .WithMany()
                        .HasForeignKey("ChoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApp.Models.CustomizationOption", "CustomizationOption")
                        .WithMany()
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApp.Models.OrderItem", "OrderItem")
                        .WithMany("Customizations")
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomizationChoice");

                    b.Navigation("CustomizationOption");

                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.OrderItem", b =>
                {
                    b.HasOne("FoodDeliveryApp.Models.MenuItem", "MenuItem")
                        .WithMany("OrderItems")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApp.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApp.Models.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");

                    b.Navigation("Order");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.Restaurant", b =>
                {
                    b.HasOne("FoodDeliveryApp.Models.RestaurantCategory", "Category")
                        .WithMany("Restaurants")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApp.Models.ApplicationUser", "Owner")
                        .WithMany("Restaurants")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.SearchHistory", b =>
                {
                    b.HasOne("FoodDeliveryApp.Models.ApplicationUser", "User")
                        .WithMany("SearchHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FoodDeliveryApp.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FoodDeliveryApp.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApp.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FoodDeliveryApp.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Payment", b =>
                {
                    b.HasOne("FoodDeliveryApp.Models.Order", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("Payment", "OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PaymentMethod", "PaymentMethod")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("FoodDeliveryApp.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("PaymentMethod");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PaymentMethod", b =>
                {
                    b.HasOne("FoodDeliveryApp.Models.CustomerProfile", null)
                        .WithMany("PaymentMethods")
                        .HasForeignKey("CustomerProfileId");

                    b.HasOne("FoodDeliveryApp.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Promotion", b =>
                {
                    b.HasOne("FoodDeliveryApp.Models.Restaurant", "Restaurant")
                        .WithMany("Promotions")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("PromotionUsage", b =>
                {
                    b.HasOne("FoodDeliveryApp.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Promotion", "Promotion")
                        .WithMany("PromotionUsages")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApp.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Promotion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Review", b =>
                {
                    b.HasOne("FoodDeliveryApp.Models.CustomerProfile", "CustomerProfile")
                        .WithMany("Reviews")
                        .HasForeignKey("CustomerProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApp.Models.MenuItem", "MenuItem")
                        .WithMany("Reviews")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("FoodDeliveryApp.Models.Order", "Order")
                        .WithMany("Reviews")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("FoodDeliveryApp.Models.Restaurant", "Restaurant")
                        .WithMany("Reviews")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CustomerProfile");

                    b.Navigation("MenuItem");

                    b.Navigation("Order");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.ApplicationUser", b =>
                {
                    b.Navigation("CustomerProfile");

                    b.Navigation("EmployeeProfile");

                    b.Navigation("Restaurants");

                    b.Navigation("SearchHistories");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.Cart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.CartItem", b =>
                {
                    b.Navigation("Customizations");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.CustomerProfile", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Orders");

                    b.Navigation("PaymentMethods");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.CustomizationOption", b =>
                {
                    b.Navigation("Choices");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.EmployeeProfile", b =>
                {
                    b.Navigation("DeliveryOrders");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.MenuItem", b =>
                {
                    b.Navigation("CustomizationOptions");

                    b.Navigation("OrderItems");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.MenuItemCategory", b =>
                {
                    b.Navigation("MenuItems");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Payment");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.OrderItem", b =>
                {
                    b.Navigation("Customizations");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.Restaurant", b =>
                {
                    b.Navigation("MenuItems");

                    b.Navigation("Orders");

                    b.Navigation("Promotions");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("FoodDeliveryApp.Models.RestaurantCategory", b =>
                {
                    b.Navigation("MenuItems");

                    b.Navigation("Restaurants");
                });

            modelBuilder.Entity("PaymentMethod", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Promotion", b =>
                {
                    b.Navigation("PromotionUsages");
                });
#pragma warning restore 612, 618
        }
    }
}
